//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



package com.thoughtworks.qdox.parser.impl;



//#line 2 "/usr/local/src/qdox/src/grammar/parser.y"
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import com.thoughtworks.qdox.builder.Builder;
import com.thoughtworks.qdox.parser.*;
import com.thoughtworks.qdox.parser.expression.*;
import com.thoughtworks.qdox.parser.structs.*;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
//#line 45 "Parser.java"




public class Parser
             implements CommentHandler
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//## **user defined:Value
String   yytext;//user variable to return contextual strings
Value yyval; //used to return semantic vals from action routines
Value yylval;//the 'lval' (result) I got from yylex()
Value valstk[] = new Value[YYSTACKSIZE];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
final void val_init()
{
  yyval=new Value();
  yylval=new Value();
  valptr=-1;
}
final void val_push(Value val)
{
  try {
    valptr++;
    valstk[valptr]=val;
  }
  catch (ArrayIndexOutOfBoundsException e) {
    int oldsize = valstk.length;
    int newsize = oldsize*2;
    Value[] newstack = new Value[newsize];
    System.arraycopy(valstk,0,newstack,0,oldsize);
    valstk = newstack;
    valstk[valptr]=val;
  }
}
final Value val_pop()
{
  return valstk[valptr--];
}
final void val_drop(int cnt)
{
  valptr -= cnt;
}
final Value val_peek(int relative)
{
  return valstk[valptr-relative];
}
final Value dup_yyval(Value val)
{
  return val;
}
//#### end semantic value section ####
public final static short SEMI=257;
public final static short DOT=258;
public final static short DOTDOTDOT=259;
public final static short COMMA=260;
public final static short STAR=261;
public final static short PERCENT=262;
public final static short EQUALS=263;
public final static short ANNOSTRING=264;
public final static short ANNOCHAR=265;
public final static short SLASH=266;
public final static short PLUS=267;
public final static short MINUS=268;
public final static short STAREQUALS=269;
public final static short SLASHEQUALS=270;
public final static short PERCENTEQUALS=271;
public final static short PLUSEQUALS=272;
public final static short MINUSEQUALS=273;
public final static short LESSTHAN2EQUALS=274;
public final static short GREATERTHAN2EQUALS=275;
public final static short GREATERTHAN3EQUALS=276;
public final static short AMPERSANDEQUALS=277;
public final static short CIRCUMFLEXEQUALS=278;
public final static short VERTLINEEQUALS=279;
public final static short PACKAGE=280;
public final static short IMPORT=281;
public final static short PUBLIC=282;
public final static short PROTECTED=283;
public final static short PRIVATE=284;
public final static short STATIC=285;
public final static short FINAL=286;
public final static short ABSTRACT=287;
public final static short NATIVE=288;
public final static short STRICTFP=289;
public final static short SYNCHRONIZED=290;
public final static short TRANSIENT=291;
public final static short VOLATILE=292;
public final static short DEFAULT=293;
public final static short MODULE=294;
public final static short REQUIRES=295;
public final static short EXPORTS=296;
public final static short DYNAMIC=297;
public final static short TO=298;
public final static short USES=299;
public final static short PROVIDES=300;
public final static short WITH=301;
public final static short CLASS=302;
public final static short INTERFACE=303;
public final static short ENUM=304;
public final static short ANNOINTERFACE=305;
public final static short THROWS=306;
public final static short EXTENDS=307;
public final static short IMPLEMENTS=308;
public final static short SUPER=309;
public final static short NEW=310;
public final static short BRACEOPEN=311;
public final static short BRACECLOSE=312;
public final static short SQUAREOPEN=313;
public final static short SQUARECLOSE=314;
public final static short PARENOPEN=315;
public final static short PARENCLOSE=316;
public final static short LESSTHAN=317;
public final static short GREATERTHAN=318;
public final static short LESSEQUALS=319;
public final static short GREATEREQUALS=320;
public final static short LESSTHAN2=321;
public final static short GREATERTHAN2=322;
public final static short GREATERTHAN3=323;
public final static short EXCLAMATION=324;
public final static short AMPERSAND2=325;
public final static short VERTLINE2=326;
public final static short EQUALS2=327;
public final static short NOTEQUALS=328;
public final static short TILDE=329;
public final static short AMPERSAND=330;
public final static short VERTLINE=331;
public final static short CIRCUMFLEX=332;
public final static short VOID=333;
public final static short QUERY=334;
public final static short COLON=335;
public final static short AT=336;
public final static short CODEBLOCK=337;
public final static short PARENBLOCK=338;
public final static short BYTE=339;
public final static short SHORT=340;
public final static short INT=341;
public final static short LONG=342;
public final static short CHAR=343;
public final static short FLOAT=344;
public final static short DOUBLE=345;
public final static short BOOLEAN=346;
public final static short IDENTIFIER=347;
public final static short BOOLEAN_LITERAL=348;
public final static short INTEGER_LITERAL=349;
public final static short FLOAT_LITERAL=350;
public final static short CHAR_LITERAL=351;
public final static short STRING_LITERAL=352;
public final static short PLUSPLUS=353;
public final static short MINUSMINUS=354;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,   54,   52,   43,   56,   56,   57,   60,   57,
   61,   57,   57,   57,   55,   55,   62,   62,   58,   58,
   59,   59,   63,   63,   49,   49,   65,   64,   66,   66,
   66,   66,   50,   50,   67,   68,   69,   70,   71,   71,
   71,   51,   74,   51,   72,   72,   81,   75,   84,   82,
   77,   77,   83,   83,   78,   78,   79,   79,   80,   88,
   88,   89,   89,   89,   87,   93,   87,   91,   91,   91,
   91,   91,   97,   94,   96,   98,   96,   47,   95,  100,
  100,  102,   99,  105,   99,  106,  106,  103,  103,  107,
  107,  109,  108,  108,  104,  104,  110,  110,   41,   41,
   90,  111,   92,  112,   92,  114,   76,  113,  115,  115,
  115,  120,  117,  116,  116,   73,   73,  124,  121,  125,
  123,  123,  126,  122,  128,    7,  129,  129,  130,    8,
    8,    8,  131,    9,  133,  133,  133,  132,  132,  132,
  127,  127,  118,  118,  101,  135,  135,  134,  134,   25,
   25,   26,   26,   26,   26,   26,   26,   26,   26,   29,
   29,  139,  139,  137,  137,   28,   28,   28,   28,  141,
  141,  138,  138,   27,   27,   27,   27,  142,  142,  143,
    5,   36,   36,   34,   35,   42,   42,   42,   42,   42,
   42,   42,   42,   42,   42,   42,   42,   10,   10,   11,
   11,   12,   12,   13,   13,   14,   14,   15,   15,   16,
   16,   16,   17,   17,   17,   17,   17,   18,   18,   18,
   18,   19,   19,   19,   20,   20,   20,   20,   21,   21,
   21,   21,   21,   23,   24,   22,   22,   22,   22,   30,
   30,   30,   31,   32,   33,   33,   33,   44,   44,    2,
    2,    3,    3,   37,   37,   38,   38,  145,   85,  148,
  146,  144,  144,  149,  147,  147,  151,  140,  136,  136,
  150,  150,   48,   48,   45,   45,   46,   46,   39,   39,
    1,    1,    1,    1,    1,    1,    1,    1,  152,    4,
   40,   40,   86,   86,   53,   53,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  119,
  119,    6,    6,    6,    6,    6,
};
final static short yylen[] = {                            2,
    3,    2,    0,    7,    1,    1,    3,    4,    0,    6,
    0,    5,    3,    5,    0,    2,    1,    1,    0,    2,
    0,    2,    1,    1,    0,    2,    0,    4,    1,    1,
    1,    1,    0,    2,    3,    5,    4,    6,    1,    1,
    1,    0,    0,    3,    1,    1,    0,    8,    0,    4,
    0,    1,    1,    3,    0,    2,    0,    2,    3,    0,
    1,    1,    1,    1,    0,    0,    3,    1,    1,    1,
    1,    1,    0,    6,    0,    0,    4,    2,    3,    1,
    1,    0,    9,    0,    8,    3,    1,    0,    1,    1,
    3,    3,    4,    1,    0,    2,    1,    3,    1,    1,
    2,    0,    8,    0,    9,    0,    6,    4,    0,    2,
    2,    0,    5,    0,    2,    1,    1,    0,    7,    2,
    0,    1,    0,    5,    0,    4,    1,    3,    3,    1,
    1,    1,    0,    4,    0,    1,    1,    0,    2,    2,
    0,    3,    0,    2,    3,    2,    2,    0,    1,    1,
    1,    1,    4,    3,    1,    3,    4,    1,    1,    8,
    7,    1,    2,    0,    1,    4,    7,    9,    7,    1,
    3,    0,    1,    4,    4,    4,    4,    1,    2,    3,
    1,    1,    1,    3,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    5,    1,
    3,    1,    3,    1,    3,    1,    3,    1,    3,    1,
    3,    3,    1,    3,    3,    3,    3,    1,    3,    3,
    3,    1,    3,    3,    1,    3,    3,    3,    1,    1,
    2,    2,    1,    2,    2,    1,    2,    2,    1,    1,
    1,    1,    2,    2,    5,    4,    5,    1,    1,    1,
    1,    2,    2,    2,    3,    0,    1,    0,    3,    0,
    4,    0,    1,    2,    0,    2,    0,    4,    0,    1,
    1,    3,    1,    1,    2,    1,    2,    2,    1,    3,
    1,    1,    1,    1,    1,    1,    1,    1,    0,    3,
    1,    3,    1,    3,    0,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,
    3,    1,    1,    1,    1,    1,
};
final static short yydefred[] = {                         0,
    0,    0,    0,   27,    0,   24,    0,   26,   23,    0,
    2,    0,   34,   29,   30,   31,   32,    0,  279,    0,
    0,    0,    0,  298,  299,  300,  301,  302,  303,  304,
  308,  305,  307,  306,  309,    0,  297,  296,    0,    0,
    0,    0,    0,   35,    0,    0,    3,   28,  280,    0,
  126,   41,    0,   44,   39,   40,   45,   46,  116,  117,
   37,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  281,  282,  284,  285,  283,  286,  287,  288,    0,
  316,  312,  313,  314,  315,    0,    0,    0,  152,  131,
  137,  132,  130,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  225,  233,  229,  230,  240,  150,  151,
  159,  155,    0,  241,  242,  239,    0,    0,  127,    0,
    0,    0,    0,    0,    0,    0,   36,   15,    0,  231,
  232,    0,  267,    0,    0,    0,    0,  289,    0,  270,
    0,    0,  182,  183,    0,  181,    0,  238,  237,    0,
    0,  234,  235,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  243,  244,    0,    0,
    0,  138,  142,    0,    0,    0,  123,   38,    0,   49,
    0,   52,    0,    0,    0,  165,  162,    0,    0,    0,
  178,    0,    0,    0,    0,    0,    0,  154,  186,  187,
  188,  189,  190,  191,  192,  193,  194,  195,  196,  197,
    0,    0,    0,  129,  170,    0,    0,    0,  254,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  226,  228,
  227,  156,    0,    0,    0,    0,  128,    0,    0,    0,
    0,  106,    0,   19,    0,    0,    0,    4,   16,    0,
    0,    0,    0,  273,  250,    0,  274,  271,    0,  163,
    0,    0,  148,  176,  174,  179,  292,  177,  175,  290,
    0,    0,  184,  246,    0,  166,    0,  255,  153,    0,
    0,    0,  157,  140,  134,  139,    0,    0,    0,  118,
  122,  293,    0,    0,   65,  124,    0,    0,    0,    0,
  249,    0,    0,  258,    0,   53,    0,    0,    0,  275,
    0,    0,    0,  268,    0,  180,    0,    0,    0,  245,
  247,  171,  199,    0,    0,   56,   47,    0,    0,    0,
  109,  107,    0,   17,   18,    0,   20,    0,    0,   13,
    0,    0,    0,   50,    0,  277,  278,  272,    0,  145,
  147,   81,  146,   80,    0,    0,    0,    0,  119,  294,
    0,   59,    0,    8,    0,    0,    0,    0,    0,  259,
  263,   54,  167,   61,  161,    0,    0,  169,   48,   65,
  110,    0,  111,    0,   72,    0,   70,   71,   67,   62,
   63,   64,   68,   69,    0,    6,    0,   12,   14,    0,
  160,    0,    0,  108,  112,  144,  101,    0,    0,    0,
    0,   10,    0,    0,  168,    0,    0,    0,   73,    0,
    0,  100,   99,   79,    7,    0,  261,    0,    0,    0,
    0,   78,    0,   75,    0,   82,    0,  266,    0,  113,
    0,    0,   89,    0,   87,    0,    0,    0,    0,    0,
  311,    0,    0,  295,    0,   74,   76,    0,    0,    0,
    0,   92,    0,    0,   86,    0,    0,    0,    0,    0,
   93,    0,    0,  103,    0,   77,    0,    0,    0,   85,
  105,    0,    0,   83,
};
final static short yydgoto[] = {                          1,
   88,  321,  275,  276,  225,   89,   37,   91,   92,  143,
   94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
  104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
  114,  115,  116,  144,  145,  146,  155,  452,  117,  138,
  444,  221,   47,  322,  277,  330,  439,  278,    2,    3,
   21,   11,  461,   64,  189,  417,  269,  317,  387,  385,
  359,  357,    8,    9,   18,   13,   14,   15,   16,   17,
   54,   55,   56,   42,   57,   58,  191,  308,  262,  394,
  378,  192,  325,  270,  326,  313,  353,  395,  409,  410,
  411,  412,  383,  413,  414,  468,  454,  488,  431,  373,
  284,  470,  462,  484,  453,  463,  464,  465,  466,  493,
  437,  455,  352,  314,  381,  402,  403,  404,  450,  436,
   59,   60,  310,  349,  311,  263,   51,   41,  118,  119,
  120,  258,  121,  337,  338,  139,  195,  227,  196,  140,
  228,  200,  201,  390,  362,  391,  447,  434,  448,  279,
  193,  205,   38,
};
final static short yysindex[] = {                         0,
    0, -240, -219,    0, -302,    0, -219,    0,    0, -252,
    0,  377,    0,    0,    0,    0,    0, -302,    0, -186,
    0, -302, -102,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -302,    0,    0,   40, -241,
 -132,  -82,   93,    0, -236, -186,    0,    0,    0, 3168,
    0,    0,  562,    0,    0,    0,    0,    0,    0,    0,
    0, -227,  -68, -113, 3309, 3309,   -9,  883, 3309, 3309,
 3309,    0,    0,    0,    0,    0,    0,    0,    0,    6,
    0,    0,    0,    0,    0, 3309, 3309,  -50,    0,    0,
    0,    0,    0, -260,  -44,  -45,  -15,   -1,   27,   76,
   57,   90,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   10,    0,    0,    0,  -49,   82,    0,   50,
   60,   19,   36,   42,   43,  140,    0,    0,   95,    0,
    0,   96,    0,   97,   99,  -38, -186,    0,   69,    0,
  -50,  101,    0,    0,  489,    0,  -63,    0,    0, 3214,
 3309,    0,    0,  104,  107,  163, 3309, 3309, 3309, 3309,
 3309, 3309, 3309, 3309, 3309, 3309, 3309, 3309, 3309, 3309,
 3309, 3309, 3309, 3309, 3309, 3309,    0,    0,   18,   -7,
   77,    0,    0,   96,   96,  114,    0,    0,   75,    0,
   79,    0,  208,  105,  112,    0,    0, 3260, -126,   99,
    0,   83, -126,   99,  115,   97, -187,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 3309,  796,  -58,    0,    0,  -49,  113,  171,    0,  119,
  132,  -44,  103,  -45,  -15,   -1,   27,   76,   76,   57,
   57,   57,   57,   90,   90,   90,   34,   34,    0,    0,
    0,    0,  178,   92,  141,  179,    0, -118,  138,  139,
  787,    0,  142,    0, -254,  787,  787,    0,    0,  102,
  135,  -39,  -50,    0,    0,   -4,    0,    0, -152,    0,
 3309,  137,    0,    0,    0,    0,    0,    0,    0,    0,
  143, 3309,    0,    0,  796,    0, 3309,    0,    0, 3309,
   96,  144,    0,    0,    0,    0,  787,  114,  787,    0,
    0,    0,  194,  146,    0,    0, -212, -302, -186,  -50,
    0,  198,  174,    0, -122,    0, 3309,  787,  787,    0,
  107,  107,  208,    0,  160,    0,  165, 2827, 3309,    0,
    0,    0,    0,  133, 3309,    0,    0,  194,  142,  787,
    0,    0,  167,    0,    0,  224,    0, -186,  188,    0,
  787,  181,  102,    0,  177,    0,    0,    0,  142,    0,
    0,    0,    0,    0,  182,  172,  183,  142,    0,    0,
 -171,    0,  243,    0,  188, -302,  244,  245, -302,    0,
    0,    0,    0,    0,    0,  142, 3309,    0,    0,    0,
    0,  191,    0, -269,    0, 2920,    0,    0,    0,    0,
    0,    0,    0,    0,  248,    0,  246,    0,    0,  249,
    0,  192,    0,    0,    0,    0,    0,    0,  164,  867,
 -196,    0, -302,  184,    0,  195,  197,  -50,    0,    0,
  166,    0,    0,    0,    0, -302,    0,  184, 3309,  142,
    0,    0,  200,    0,  203,    0,  249,    0,  220,    0,
 3418,  221,    0,  279,    0,    0,    0,   23,    0,  225,
    0, -235,  235,    0,  227,    0,    0,  228,    0,  210,
  -50,    0, -302, -196,    0,    0,  -50,  210,  235,  240,
    0,  249,  313,    0,  235,    0,  237,  -50, -302,    0,
    0,  235,  249,    0,
};
final static short yyrindex[] = {                       353,
    0,  452,  669,    0,    0,    0,  391,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  180,
  415,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  278,  748,    0,    0,    0,   25,    0,    0,    0, -224,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  658,
    0,    0,    0,    0,    0,    0,    0,  317,    0,    0,
    0,    0,    0, 2774, 2668, 2562, 2456, 2350, 2244, 2085,
 1610, 1363, 1127,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2967,    0,    0,    0,  842,  260,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  561,    0,
    0,  230,    0,  -41,    0,    0,   30,    0,    0,    0,
  -97,    0,    0,    0,    0,    0, 2921,    0,    0,  267,
  263,    0,    0,    0,  464,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    8, -140,  273,    0,    0,    0,    0,
    0,    0,    0,  588,    0,    0,    0,    0,    0,  937,
    0,    0,    0,  937, 3158,  270,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  747,    0,  275,    0,    0,
    0, 2721,    0, 2615, 2509, 2403, 2297, 2138, 2191, 1705,
 1800, 1895, 1990, 1416, 1462, 1515, 1222, 1317,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  267,   38,  281,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -79,    0,    0,    0, -211,    0,    0,    0,    0,
  263,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  230,    0,    0,    0,    0,    0,    0,  273,    0,    0,
    0,    0,  282,    0,    0,    0,    0,    0,   16, -207,
    0,    0,    0,    0,    0,    0,  263,    0,    0,    0,
  -17,   51,    0,    0,    0,    0,    0,  274,  263,    0,
    0,    0,    0,    0,  263,    0,    0,  285,    0,    0,
    0,    0, 3109,    0,    0,    0,    0,   20,  340,    0,
    0,  -74,    0,    0,    0,    0,    0,    0, 1032,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -259,    0, 3382,    0,  340,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1032,  263,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  341,    0,    0, -117,
    0,    0, 3043,    0,    0,    0,    0, -139,    0,    0,
    0,    0,    0,  -53,    0, -202,    0, -201,    0,  -10,
    0,    0,    0,    0,    0,    0,    0,  -53,  263, -231,
  657,    0,    0,    0,    0,    0, -116,    0,    0,    0,
    0,    0,    0,    0,    0,  -70,  657,    0,  657,    0,
    0,    0, -174,    0,    0,    0,    0,    0,  657,    0,
 -159,    0,    0,    0,    0,  -23, -215,    0,  262,    0,
    0, -216, -173,    0, -174,    0,    0, -215,    0,    0,
    0, -174, -178,    0,
};
final static short yygindex[] = {                         0,
  -62, -181,    0,  -64,  -59,    0,    1, -128,    0,  -48,
    0,  443,  442,  444,  445,  441,  209,  241,  233,  213,
  -51, -192,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -108,  -87,   -5,    0,
  121,    0, -301, -246,    0,    0, -412,  276,    0,  606,
    0,    0,    5,    0,    0,    0,    0,    0,  226,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  229,  266,    0,    0,    0, -147,    0,  305, -245,
    0,  247,    0,    0,  253,  342,  250, -193,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -180,    0, -297, -163,    0,    0,    0,  211,  212,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  471,
    0,    0,    0,    0,    0,  449,  481, -270,    0,  -69,
    0,  552,  -27,    0,    0,    0,  242,    0,    0,    0,
    0,    0,    0,
};
final static int YYTABLESIZE=3765;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         20,
  156,   93,    6,  136,   23,  135,  141,   12,  180,  142,
  335,  274,   39,  130,  131,  356,   43,  316,  148,  149,
  323,  224,  288,  480,   63,   60,  199,  203,   60,  294,
   46,  254,   22,  126,  152,  153,  259,  260,  223,    4,
   97,  256,  318,   97,   19,  251,   53,  251,  251,  248,
   90,  248,  114,  207,  310,  256,  365,  310,  256,  482,
  442,   10,  137,  147,  197,  157,    5,  491,  375,  354,
  231,   40,  355,  158,  377,  496,  143,  425,   98,  312,
   60,   98,   95,   96,  416,  400,  133,  143,  401,  251,
  256,  135,   19,  248,   19,    5,  251,  256,  233,  251,
  256,   93,  341,  379,   60,   49,  251,  333,  310,  310,
   49,  481,  285,   84,  388,   60,  289,  180,  279,   49,
   97,  256,  249,  250,  251,  346,  422,  312,  292,  306,
  273,  445,  399,  310,   19,  251,  197,  363,  282,  248,
  443,  304,  260,  264,  310,  226,  366,  367,   65,   66,
   90,  274,  226,  344,   44,   45,  256,  374,   98,  429,
  256,  293,   95,   96,  331,  334,   51,  332,  380,  475,
   51,  478,  286,  279,   52,  102,  286,  279,  459,  125,
  276,  490,   50,  441,  283,  262,  230,  137,  127,   90,
   67,   68,  226,  305,  179,  364,   69,  128,  273,  255,
  260,  264,  421,  320,  320,   70,  265,  279,  179,   93,
   71,  331,  260,  264,  472,  226,  279,    5,  256,  202,
   72,   73,   74,   75,   76,   77,   78,   79,  129,   81,
   82,   83,   84,   85,   86,   87,   91,  342,  276,  253,
  340,  253,  253,  262,  273,   94,  273,  279,  132,  154,
  255,  343,  222,  202,  230,  137,  460,  295,   90,  319,
  137,  137,  154,  154,  265,  273,  273,  328,  150,  329,
  273,  279,   11,  164,  198,  226,    9,  141,  372,  476,
  159,    5,  477,  253,    5,  160,  291,  273,  291,  291,
  253,  226,   94,  253,  174,  175,   48,   40,  320,  176,
  253,  137,  279,  137,  104,  230,  279,  252,  154,  252,
  252,   46,  358,   11,   51,   51,  161,    9,   51,  252,
  151,  226,  137,  137,  420,  497,  253,  137,  162,  253,
  291,  500,  226,  226,  190,    5,  279,  291,  504,  226,
  291,  181,  291,  320,  137,   55,  291,  291,   55,   61,
   62,  252,   25,  163,  164,  137,  172,  173,  252,  291,
  182,  252,  177,  178,   49,  184,  291,  320,  252,  264,
  265,  238,  239,  266,  267,  183,  291,  169,  170,  171,
   46,  457,  185,  137,  247,  248,  268,  406,  186,  187,
   42,  226,  165,  166,  167,  168,  188,  252,  320,  495,
  137,  244,  245,  246,  426,  240,  241,  242,  243,  151,
  502,  198,  190,  194,    1,  206,  208,  229,  492,  230,
  231,  261,  280,  256,  137,  271,  281,   46,  296,  287,
  297,  133,  298,  299,  503,  301,  125,  300,  302,  125,
  137,  150,  303,  226,  307,  309,  125,  125,  324,  327,
  336,   33,  315,  350,  360,  137,  351,  339,  345,  125,
  125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
  125,  125,  125,  125,  361,  369,  370,  137,  382,  376,
  384,  125,  125,  125,  125,  386,  397,  389,  125,  125,
  125,  125,  393,  137,  125,  125,  125,  396,  398,  405,
  418,  419,  424,  125,  432,  433,  202,  435,  125,  449,
  438,  451,  456,  446,  467,  125,  125,  469,  125,  125,
  125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
  125,  125,  125,  125,  141,  471,  473,  141,  474,  479,
  483,  272,  487,  489,  141,  141,   72,   73,   74,   75,
   76,   77,   78,   79,   19,  498,  481,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
  141,  141,  499,  501,  256,  136,   51,  133,  172,  141,
  141,  141,  141,   57,  164,  149,  141,  141,  141,  141,
  173,  121,   58,  141,  141,  120,   21,   22,   95,  232,
  234,  141,  237,  235,  494,  236,  141,    7,  368,   25,
  415,  407,  347,  141,  141,  392,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
  141,  141,   25,   25,   25,   25,   25,   25,   25,   25,
   25,   25,   25,   25,   25,   25,   33,   42,  408,  423,
  348,  257,  430,  290,   25,   25,   25,   25,   24,   25,
   26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
   36,   43,   42,   42,   42,   42,   42,   42,   42,   42,
   42,   42,   42,   42,  485,  486,  291,  204,   25,  458,
    0,    0,   42,   42,   42,   42,   43,   43,   43,   43,
   43,   43,   43,   43,   43,   43,   43,   43,   33,    0,
    0,    0,    5,    0,    0,    0,   43,   43,   43,   43,
  257,  257,    0,  257,  257,  257,   42,    0,    0,  257,
  257,  257,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   33,    0,    0,    0,    0,    0,
   43,  209,    0,   33,   33,   33,   33,  210,  211,  212,
  213,  214,  215,  216,  217,  218,  219,  220,    0,  257,
    0,    0,  257,  257,  257,  257,    0,  257,  257,  257,
  257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
  257,  257,  257,  257,  257,  257,    0,  257,  257,  257,
  257,    0,  257,  257,  257,  257,  257,  257,  257,  257,
  257,  257,  257,  257,  257,  257,  257,  257,  279,    0,
  279,  279,  279,  279,    0,    0,  279,  279,  279,  279,
  279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
    0,    0,    0,   24,   25,   26,   27,   28,   29,   30,
   31,   32,   33,   34,   35,    0,    0,    0,    0,    0,
    0,    0,    0,  122,  123,  124,  125,    0,    0,  279,
  279,  279,  279,  279,  279,    0,  279,  279,  279,  279,
  279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
  279,  279,  279,    0,  279,  279,  279,    5,    0,  279,
  279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
  279,  279,  279,  279,  279,  279,    0,    0,  279,  279,
    0,  267,    0,  279,  279,  279,  267,  267,  267,  267,
  267,  267,  267,  267,  267,    0,    0,    0,  295,  295,
  295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
  295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
  295,  295,  295,    0,    0,    0,    0,    0,    0,    0,
  279,    0,   88,  279,  279,  279,  279,  279,  279,  279,
  279,    0,  279,  279,  279,  279,    0,  279,  279,  279,
    0,  279,  295,    0,    0,  295,  295,  295,  295,  295,
  295,  295,  295,  295,  295,    0,  158,  158,  158,  185,
  279,  279,  158,  158,  158,  185,  185,  185,  185,  185,
  185,  185,  185,  185,  185,  185,    0,    0,    0,  295,
  295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
  295,    0,    0,    0,    0,    0,    0,    0,    0,  295,
  295,  295,  295,    0,    0,  158,  158,  158,  158,    0,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,    0,
  158,  158,    0,  295,    0,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,   67,   68,    0,  158,  158,  158,
   69,    0,    0,    0,    0,    0,    0,    0,    0,   70,
    0,    0,    0,    0,   71,   72,   73,   74,   75,   76,
   77,   78,   79,   19,   72,   73,   74,   75,   76,   77,
   78,   79,  129,   81,   82,   83,   84,   85,    0,    0,
  158,  158,  158,  158,    0,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,    0,  158,  158,  158,    0,    0,
  158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
  158,  158,  158,  158,  158,  158,  256,  256,  256,  133,
    0,    0,  256,  256,  256,   72,   73,   74,   75,   76,
   77,   78,   79,  440,    0,    0,    0,    0,    0,    0,
    0,   72,   73,   74,   75,   76,   77,   78,   79,  134,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  256,  256,  256,  256,    0,
  256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
  256,  256,  256,  256,  256,  256,  256,  256,  256,    0,
  256,  256,  256,    0,    0,  256,  256,  256,  256,  256,
  256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
  256,   60,   60,   60,    0,    0,    0,   60,   60,   60,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   60,   60,    0,   60,    0,   60,   60,   60,   60,   60,
   60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
   60,   60,   60,   60,    0,   60,   60,   60,    0,    0,
   60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
   60,   60,   60,   60,   60,   60,  222,    0,    0,    0,
    0,    0,    0,  222,  222,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  222,  222,  222,  222,    0,
  222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
  222,  222,  222,  222,  222,  222,  222,  222,  222,    0,
  222,  222,  222,    0,    0,  222,  222,  222,  222,  222,
  222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
  222,  223,    0,    0,    0,    0,    0,    0,  223,  223,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  223,  223,  223,  223,    0,  223,  223,  223,  223,  223,
  223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
  223,  223,  223,  223,    0,  223,  223,  223,    0,    0,
  223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
  223,  223,  223,  223,  223,  223,  224,    0,    0,    0,
    0,    0,    0,  224,  224,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  218,    0,    0,  224,  224,  224,  224,    0,
  224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
  224,  224,  224,  224,  224,  224,  224,  224,  224,    0,
  224,  224,  224,    0,    0,  224,  224,  224,  224,  224,
  224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
  224,  218,  218,  218,  218,  219,  218,  218,  218,  218,
  218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
  218,  218,  218,  218,  218,    0,  218,  218,  218,    0,
    0,  218,  218,  218,  218,  218,  218,  218,  218,  218,
  218,  218,  218,  218,  218,  218,  218,    0,    0,    0,
    0,  220,    0,    0,  219,  219,  219,  219,    0,  219,
  219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
  219,  219,  219,  219,  219,  219,  219,  219,    0,  219,
  219,  219,    0,    0,  219,  219,  219,  219,  219,  219,
  219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
  220,  220,  220,  220,  221,  220,  220,  220,  220,  220,
  220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
  220,  220,  220,  220,    0,  220,  220,  220,    0,    0,
  220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
  220,  220,  220,  220,  220,  220,    0,    0,    0,    0,
    0,    0,    0,  221,  221,  221,  221,    0,  221,  221,
  221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
  221,  221,  221,  221,  221,  221,  221,    0,  221,  221,
  221,    0,    0,  221,  221,  221,  221,  221,  221,  221,
  221,  221,  221,  221,  221,  221,  221,  221,  221,  213,
    0,    0,    0,    0,    0,    0,  213,  213,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  213,  213,
  213,  213,    0,  213,  213,  213,  213,  213,  213,  213,
    0,    0,    0,  213,  213,  213,  213,  213,  213,  213,
  213,  213,    0,  213,  213,  213,    0,    0,  213,  213,
  213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
  213,  213,  213,  213,  214,    0,    0,    0,    0,    0,
    0,  214,  214,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  214,  214,  214,  214,    0,  214,  214,
  214,  214,  214,  214,  214,    0,    0,    0,  214,  214,
  214,  214,  214,  214,  214,  214,  214,    0,  214,  214,
  214,    0,    0,  214,  214,  214,  214,  214,  214,  214,
  214,  214,  214,  214,  214,  214,  214,  214,  214,  215,
    0,    0,    0,    0,    0,    0,  215,  215,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  215,  215,
  215,  215,    0,  215,  215,  215,  215,  215,  215,  215,
    0,    0,    0,  215,  215,  215,  215,  215,  215,  215,
  215,  215,    0,  215,  215,  215,    0,    0,  215,  215,
  215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
  215,  215,  215,  215,  216,    0,    0,    0,    0,    0,
    0,  216,  216,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  216,  216,  216,  216,    0,  216,  216,
  216,  216,  216,  216,  216,    0,    0,    0,  216,  216,
  216,  216,  216,  216,  216,  216,  216,    0,  216,  216,
  216,    0,    0,  216,  216,  216,  216,  216,  216,  216,
  216,  216,  216,  216,  216,  216,  216,  216,  216,  217,
    0,    0,    0,    0,    0,    0,  217,  217,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  217,  217,
  217,  217,    0,  217,  217,  217,  217,  217,  217,  217,
    0,    0,    0,  217,  217,  217,  217,  217,  217,  217,
  217,  217,    0,  217,  217,  217,    0,    0,  217,  217,
  217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
  217,  217,  217,  217,  210,    0,    0,    0,    0,    0,
    0,  210,  210,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  210,  210,  210,  210,  211,  210,  210,
  210,    0,    0,    0,  211,  211,    0,    0,  210,  210,
  210,  210,  210,  210,  210,  210,  210,    0,  210,  210,
  210,    0,    0,  210,  210,  210,  210,  210,  210,  210,
  210,  210,  210,  210,  210,  210,  210,  210,  210,    0,
    0,    0,    0,    0,    0,    0,  211,  211,  211,  211,
  212,  211,  211,  211,    0,    0,    0,  212,  212,    0,
    0,  211,  211,  211,  211,  211,  211,  211,  211,  211,
    0,  211,  211,  211,    0,    0,  211,  211,  211,  211,
  211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
  211,  211,    0,    0,    0,    0,    0,    0,    0,  212,
  212,  212,  212,  208,  212,  212,  212,    0,    0,    0,
  208,  208,    0,    0,  212,  212,  212,  212,  212,  212,
  212,  212,  212,    0,  212,  212,  212,    0,    0,  212,
  212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
  212,  212,  212,  212,  212,    0,    0,    0,    0,    0,
    0,    0,  208,  208,  208,  208,  209,  208,  208,  208,
    0,    0,    0,  209,  209,    0,    0,  208,  208,  208,
    0,    0,  208,  208,  208,  208,    0,  208,  208,  208,
    0,    0,  208,  208,  208,  208,  208,  208,  208,  208,
  208,  208,  208,  208,  208,  208,  208,  208,    0,    0,
    0,    0,    0,    0,    0,  209,  209,  209,  209,  206,
  209,  209,  209,    0,    0,    0,  206,  206,    0,    0,
  209,  209,  209,    0,    0,  209,  209,  209,  209,    0,
  209,  209,  209,    0,    0,  209,  209,  209,  209,  209,
  209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
  209,    0,    0,    0,    0,    0,    0,    0,  206,  206,
  206,  206,  207,  206,  206,  206,    0,    0,    0,  207,
  207,    0,    0,  206,  206,  206,    0,    0,  206,    0,
  206,  206,    0,  206,  206,  206,    0,    0,  206,  206,
  206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
  206,  206,  206,  206,    0,    0,    0,    0,    0,    0,
    0,  207,  207,  207,  207,  204,  207,  207,  207,    0,
    0,    0,  204,  204,    0,    0,  207,  207,  207,    0,
    0,  207,    0,  207,  207,    0,  207,  207,  207,    0,
    0,  207,  207,  207,  207,  207,  207,  207,  207,  207,
  207,  207,  207,  207,  207,  207,  207,    0,    0,    0,
    0,    0,    0,    0,  204,  204,  204,  204,  205,  204,
  204,  204,    0,    0,    0,  205,  205,    0,    0,  204,
  204,  204,    0,    0,  204,    0,  204,    0,    0,  204,
  204,  204,    0,    0,  204,  204,  204,  204,  204,  204,
  204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
    0,    0,    0,    0,    0,    0,    0,  205,  205,  205,
  205,  202,  205,  205,  205,    0,    0,    0,  202,  202,
    0,    0,  205,  205,  205,    0,    0,  205,    0,  205,
    0,    0,  205,  205,  205,    0,    0,  205,  205,  205,
  205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
  205,  205,  205,    0,    0,    0,    0,    0,    0,    0,
  202,  202,  202,  202,  203,  202,  202,  202,    0,    0,
    0,  203,  203,    0,    0,  202,  202,  202,    0,    0,
  202,    0,    0,    0,    0,  202,  202,  202,    0,    0,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
  202,  202,  202,  202,  202,  202,    0,    0,    0,    0,
    0,    0,    0,  203,  203,  203,  203,  200,  203,  203,
  203,    0,    0,    0,  200,  200,    0,    0,  203,  203,
  203,    0,    0,  203,    0,    0,    0,    0,  203,  203,
  203,    0,    0,  203,  203,  203,  203,  203,  203,  203,
  203,  203,  203,  203,  203,  203,  203,  203,  203,    0,
    0,    0,    0,    0,    0,    0,  200,  200,  200,  200,
  201,  200,  200,  200,    0,    0,    0,  201,  201,    0,
    0,  200,    0,  200,    0,    0,  200,    0,    0,    0,
    0,  200,  200,  200,    0,    0,  200,  200,  200,  200,
  200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
  200,  200,    0,    0,    0,    0,    0,    0,    0,  201,
  201,  201,  201,  198,  201,  201,  201,    0,    0,    0,
  198,  198,    0,    0,  201,    0,  201,    0,    0,  201,
    0,    0,    0,    0,  201,  201,  201,    0,    0,  201,
  201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
  201,  201,  201,  201,  201,    0,    0,    0,    0,    0,
    0,    0,  198,  198,  198,  198,  371,  198,  198,  198,
    0,    0,    0,   65,   66,    0,    0,  198,    0,    0,
    0,    0,  198,    0,    0,    0,    0,    0,  198,  198,
    0,    0,  198,  198,  198,  198,  198,  198,  198,  198,
  198,  198,  198,  198,  198,  198,  198,  198,    0,    0,
    0,    0,    0,    0,    0,   67,   68,  283,    0,    0,
    0,   69,    0,    0,    0,    0,    0,    0,    0,    0,
   70,    0,    0,    0,    0,   71,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   72,   73,   74,   75,   76,
   77,   78,   79,  129,   81,   82,   83,   84,   85,   86,
   87,  158,  158,  185,    0,    0,  158,  158,  158,  185,
  185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
    0,   24,   25,   26,   27,   28,   29,   30,   31,   32,
   33,   34,   35,    0,    0,    0,    0,    0,    0,    0,
    0,  122,  123,  124,  125,    0,  236,  236,  236,    0,
    0,    0,  236,  236,  236,    0,  190,  158,  158,  158,
  158,  158,  158,  158,    0,  158,  158,  158,  158,    0,
  158,  158,  158,    0,  158,    5,  427,    0,   72,   73,
   74,   75,   76,   77,   78,   79,  428,    0,    0,    0,
    0,    0,    0,  158,  158,  236,  236,  236,  236,    0,
  236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
  236,  236,  236,  236,  236,  236,  236,  236,  236,   66,
  236,  236,  236,    0,    0,  236,  236,  236,  236,  236,
  236,  236,  236,  236,  236,  236,  236,  236,  236,    0,
    0,    0,    0,    0,   66,   66,   66,   66,   66,   66,
   66,   66,   66,   66,   66,   66,    0,    0,    0,    0,
    0,    0,    0,    0,   66,   66,   66,   66,    0,    0,
    0,    0,    0,    0,  115,    0,    0,    0,    0,   66,
    0,    0,    0,    0,    0,   66,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   66,   66,
    0,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
   66,   66,    0,    0,    0,    0,    0,    0,    0,    0,
   66,   66,   66,   66,  269,  269,  269,  269,    0,    0,
    0,    0,    0,    0,    0,   66,    0,    0,    0,    0,
    0,    0,    0,    0,   65,   66,    0,    0,    0,    0,
    0,    0,    0,    0,   66,   66,    0,   66,   66,   66,
   66,   66,   66,   66,   66,   66,    0,    0,  269,    0,
    0,    0,    0,    0,    0,  269,    0,    0,  269,    0,
  269,    0,    0,    0,    0,  269,   67,   68,    0,    0,
   65,   66,   69,    0,    0,    0,    0,  269,    0,    0,
    0,   70,    0,    0,  269,    0,   71,    0,    0,    0,
    0,    0,    0,    5,  269,    0,   72,   73,   74,   75,
   76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
   86,   87,   67,   68,    0,    0,   65,   66,   69,    0,
    0,    0,    0,    0,    0,    0,    0,   70,    0,    0,
    0,    0,   71,    0,    0,    0,    0,    0,    0,    5,
    0,    0,   72,   73,   74,   75,   76,   77,   78,   79,
  129,   81,   82,   83,   84,   85,   86,   87,   67,   68,
    0,    0,    0,  229,   69,   65,   66,    0,    0,    0,
    0,    0,    0,   70,    0,    0,    0,    0,   71,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   72,   73,
   74,   75,   76,   77,   78,   79,  129,   81,   82,   83,
   84,   85,   86,   87,    0,    0,    0,   67,   68,    0,
    0,    0,    0,   69,    0,    0,    0,    0,    0,    0,
    0,    0,   70,    0,    0,    0,    0,   71,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   72,   73,   74,
   75,   76,   77,   78,   79,  129,   81,   82,   83,   84,
   85,   86,   87,  295,  295,  295,  295,  295,  295,  295,
  295,  295,  295,  295,  295,    0,    0,    0,    0,    0,
    0,    0,    0,  295,  295,  295,  295,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  295,   24,
   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
   35,    0,    0,    0,    0,    0,    0,  295,  295,    0,
  295,  295,  295,  295,  295,  295,  295,  295,  295,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    5,    0,    0,   72,   73,   74,   75,
   76,   77,   78,   79,   19,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          5,
   88,   50,    2,   68,   10,   68,   69,    3,  117,   69,
  281,  193,   18,   65,   66,  317,   22,  263,   70,   71,
  267,  150,  203,  259,  261,  257,  135,  136,  260,  222,
   36,  179,  285,  261,   86,   87,  184,  185,  147,  280,
  257,  257,  297,  260,  347,  257,   42,  259,  260,  257,
   50,  259,  312,  141,  257,  257,  327,  260,  260,  472,
  257,  281,   68,   69,  134,  326,  336,  480,  339,  282,
  258,  258,  285,  334,  345,  488,  336,  347,  257,  261,
  312,  260,  257,  257,  386,  257,  311,  347,  260,  301,
  306,  316,  347,  301,  347,  336,  308,  257,  158,  311,
  260,  150,  295,  349,  336,  347,  318,  260,  311,  312,
  347,  347,  200,  315,  361,  347,  204,  226,  258,  347,
  337,  337,  174,  175,  176,  307,  397,  309,  316,  258,
  193,  433,  378,  336,  347,  347,  206,  260,  198,  347,
  337,  260,  260,  260,  347,  151,  328,  329,  267,  268,
  150,  333,  158,  301,  257,  258,  316,  338,  337,  406,
  258,  221,  337,  337,  273,  318,  307,  276,  350,  467,
  311,  469,  200,  313,  257,  315,  204,  317,  449,    0,
  260,  479,  315,  430,  311,  260,  313,  193,  257,  260,
  309,  310,  198,  312,  258,  318,  315,  311,  261,  258,
  318,  318,  396,  266,  267,  324,  260,  347,  258,  258,
  329,  320,  330,  330,  461,  221,  258,  336,  316,  258,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  260,  297,  318,  257,
  292,  259,  260,  318,  307,  316,  309,  258,  258,  313,
  258,  300,  316,  258,  313,  261,  450,  316,  258,  265,
  266,  267,  313,  313,  318,  328,  329,  307,  263,  309,
  333,  313,  257,  315,  313,  281,  257,    0,  338,  257,
  325,  257,  260,  301,  260,  331,  257,  350,  259,  260,
  308,  297,  316,  311,  261,  262,  257,  258,  361,  266,
  318,  307,  313,  309,  315,  313,  317,  257,  313,  259,
  260,  317,  318,  298,  307,  308,  332,  298,  311,  302,
  315,  327,  328,  329,  389,  489,  309,  333,  330,  347,
  301,  495,  338,  339,  317,  311,  347,  308,  502,  345,
  311,  260,  313,  406,  350,  308,  317,  318,  311,  257,
  258,  301,    0,  327,  328,  361,  267,  268,  308,  330,
  311,  311,  353,  354,  347,  347,  337,  430,  318,  295,
  296,  163,  164,  299,  300,  316,  347,  321,  322,  323,
  386,  446,  347,  389,  172,  173,  312,  383,  347,  347,
    0,  397,  317,  318,  319,  320,  257,  347,  461,  487,
  406,  169,  170,  171,  404,  165,  166,  167,  168,  315,
  498,  313,  317,  317,    0,  347,  316,  314,  483,  313,
  258,  308,  318,  347,  430,  347,  315,  433,  316,  347,
  260,  317,  314,  302,  499,  258,  257,  335,  347,  260,
  446,  263,  302,  449,  307,  307,  267,  268,  347,  315,
  314,    0,  311,  260,  257,  461,  311,  315,  315,  280,
  281,  282,  283,  284,  285,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  301,  316,  312,  483,  312,  347,
  257,  302,  303,  304,  305,  298,  315,  307,  309,  310,
  311,  312,  316,  499,  315,  316,  317,  316,  316,  257,
  257,  257,  312,  324,  257,  260,  258,  316,  329,  315,
  347,  315,  347,  330,  315,  336,  337,  315,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  257,  316,  316,  260,  260,  315,
  306,  334,  316,  316,  267,  268,  339,  340,  341,  342,
  343,  344,  345,  346,  347,  316,  347,  280,  281,  282,
  283,  284,  285,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  260,  337,  258,  316,  347,  311,  316,  302,
  303,  304,  305,  311,  315,  312,  309,  310,  311,  312,
  316,  311,  311,  316,  317,  311,  257,  257,  337,  157,
  159,  324,  162,  160,  484,  161,  329,    2,  333,  257,
  385,  383,  308,  336,  337,  363,  339,  340,  341,  342,
  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  280,  281,  282,  283,  284,  285,  286,  287,
  288,  289,  290,  291,  292,  293,  294,  257,  383,  400,
  309,  181,  406,  205,  302,  303,  304,  305,  282,  283,
  284,  285,  286,  287,  288,  289,  290,  291,  292,  293,
  294,  257,  282,  283,  284,  285,  286,  287,  288,  289,
  290,  291,  292,  293,  474,  474,  206,  136,  336,  448,
   -1,   -1,  302,  303,  304,  305,  282,  283,  284,  285,
  286,  287,  288,  289,  290,  291,  292,  293,  257,   -1,
   -1,   -1,  336,   -1,   -1,   -1,  302,  303,  304,  305,
  257,  258,   -1,  260,  261,  262,  336,   -1,   -1,  266,
  267,  268,  281,  282,  283,  284,  285,  286,  287,  288,
  289,  290,  291,  292,  293,   -1,   -1,   -1,   -1,   -1,
  336,  263,   -1,  302,  303,  304,  305,  269,  270,  271,
  272,  273,  274,  275,  276,  277,  278,  279,   -1,  306,
   -1,   -1,  309,  310,  311,  312,   -1,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,   -1,  334,  335,  336,
  337,   -1,  339,  340,  341,  342,  343,  344,  345,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  258,   -1,
  260,  261,  262,  263,   -1,   -1,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
   -1,   -1,   -1,  282,  283,  284,  285,  286,  287,  288,
  289,  290,  291,  292,  293,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  302,  303,  304,  305,   -1,   -1,  309,
  310,  311,  312,  313,  314,   -1,  316,  317,  318,  319,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,   -1,  334,  335,  336,  336,   -1,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  258,   -1,   -1,  261,  262,
   -1,  334,   -1,  266,  267,  268,  339,  340,  341,  342,
  343,  344,  345,  346,  347,   -1,   -1,   -1,  282,  283,
  284,  285,  286,  287,  288,  289,  290,  291,  292,  293,
  282,  283,  284,  285,  286,  287,  288,  289,  290,  291,
  292,  293,  294,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  313,   -1,  316,  316,  317,  318,  319,  320,  321,  322,
  323,   -1,  325,  326,  327,  328,   -1,  330,  331,  332,
   -1,  334,  336,   -1,   -1,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  336,   -1,  260,  261,  262,  263,
  353,  354,  266,  267,  268,  269,  270,  271,  272,  273,
  274,  275,  276,  277,  278,  279,   -1,   -1,   -1,  282,
  283,  284,  285,  286,  287,  288,  289,  290,  291,  292,
  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  302,
  303,  304,  305,   -1,   -1,  309,  310,  311,  312,   -1,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,   -1,
  334,  335,   -1,  336,   -1,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  260,  261,  262,  309,  310,   -1,  266,  267,  268,
  315,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  324,
   -1,   -1,   -1,   -1,  329,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  339,  340,  341,  342,  343,  344,
  345,  346,  347,  348,  349,  350,  351,  352,   -1,   -1,
  309,  310,  311,  312,   -1,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,   -1,  334,  335,  336,   -1,   -1,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  260,  261,  262,  317,
   -1,   -1,  266,  267,  268,  339,  340,  341,  342,  343,
  344,  345,  346,  347,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  339,  340,  341,  342,  343,  344,  345,  346,  347,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  309,  310,  311,  312,   -1,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,   -1,   -1,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  260,  261,  262,   -1,   -1,   -1,  266,  267,  268,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  309,  310,   -1,  312,   -1,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,   -1,  334,  335,  336,   -1,   -1,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  260,   -1,   -1,   -1,
   -1,   -1,   -1,  267,  268,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  309,  310,  311,  312,   -1,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,   -1,   -1,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  260,   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  309,  310,  311,  312,   -1,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,   -1,  334,  335,  336,   -1,   -1,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  260,   -1,   -1,   -1,
   -1,   -1,   -1,  267,  268,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  260,   -1,   -1,  309,  310,  311,  312,   -1,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,   -1,   -1,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  309,  310,  311,  312,  260,  314,  315,  316,  317,
  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,   -1,  334,  335,  336,   -1,
   -1,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  353,  354,   -1,   -1,   -1,
   -1,  260,   -1,   -1,  309,  310,  311,  312,   -1,  314,
  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,   -1,  334,
  335,  336,   -1,   -1,  339,  340,  341,  342,  343,  344,
  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  309,  310,  311,  312,  260,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,   -1,  334,  335,  336,   -1,   -1,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  309,  310,  311,  312,   -1,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,   -1,  334,  335,
  336,   -1,   -1,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  260,
   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  309,  310,
  311,  312,   -1,  314,  315,  316,  317,  318,  319,  320,
   -1,   -1,   -1,  324,  325,  326,  327,  328,  329,  330,
  331,  332,   -1,  334,  335,  336,   -1,   -1,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  260,   -1,   -1,   -1,   -1,   -1,
   -1,  267,  268,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  309,  310,  311,  312,   -1,  314,  315,
  316,  317,  318,  319,  320,   -1,   -1,   -1,  324,  325,
  326,  327,  328,  329,  330,  331,  332,   -1,  334,  335,
  336,   -1,   -1,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  260,
   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  309,  310,
  311,  312,   -1,  314,  315,  316,  317,  318,  319,  320,
   -1,   -1,   -1,  324,  325,  326,  327,  328,  329,  330,
  331,  332,   -1,  334,  335,  336,   -1,   -1,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  260,   -1,   -1,   -1,   -1,   -1,
   -1,  267,  268,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  309,  310,  311,  312,   -1,  314,  315,
  316,  317,  318,  319,  320,   -1,   -1,   -1,  324,  325,
  326,  327,  328,  329,  330,  331,  332,   -1,  334,  335,
  336,   -1,   -1,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  260,
   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  309,  310,
  311,  312,   -1,  314,  315,  316,  317,  318,  319,  320,
   -1,   -1,   -1,  324,  325,  326,  327,  328,  329,  330,
  331,  332,   -1,  334,  335,  336,   -1,   -1,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  260,   -1,   -1,   -1,   -1,   -1,
   -1,  267,  268,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  309,  310,  311,  312,  260,  314,  315,
  316,   -1,   -1,   -1,  267,  268,   -1,   -1,  324,  325,
  326,  327,  328,  329,  330,  331,  332,   -1,  334,  335,
  336,   -1,   -1,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  309,  310,  311,  312,
  260,  314,  315,  316,   -1,   -1,   -1,  267,  268,   -1,
   -1,  324,  325,  326,  327,  328,  329,  330,  331,  332,
   -1,  334,  335,  336,   -1,   -1,  339,  340,  341,  342,
  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,
  353,  354,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  309,
  310,  311,  312,  260,  314,  315,  316,   -1,   -1,   -1,
  267,  268,   -1,   -1,  324,  325,  326,  327,  328,  329,
  330,  331,  332,   -1,  334,  335,  336,   -1,   -1,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  309,  310,  311,  312,  260,  314,  315,  316,
   -1,   -1,   -1,  267,  268,   -1,   -1,  324,  325,  326,
   -1,   -1,  329,  330,  331,  332,   -1,  334,  335,  336,
   -1,   -1,  339,  340,  341,  342,  343,  344,  345,  346,
  347,  348,  349,  350,  351,  352,  353,  354,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  309,  310,  311,  312,  260,
  314,  315,  316,   -1,   -1,   -1,  267,  268,   -1,   -1,
  324,  325,  326,   -1,   -1,  329,  330,  331,  332,   -1,
  334,  335,  336,   -1,   -1,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  309,  310,
  311,  312,  260,  314,  315,  316,   -1,   -1,   -1,  267,
  268,   -1,   -1,  324,  325,  326,   -1,   -1,  329,   -1,
  331,  332,   -1,  334,  335,  336,   -1,   -1,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
  351,  352,  353,  354,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  309,  310,  311,  312,  260,  314,  315,  316,   -1,
   -1,   -1,  267,  268,   -1,   -1,  324,  325,  326,   -1,
   -1,  329,   -1,  331,  332,   -1,  334,  335,  336,   -1,
   -1,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  353,  354,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  309,  310,  311,  312,  260,  314,
  315,  316,   -1,   -1,   -1,  267,  268,   -1,   -1,  324,
  325,  326,   -1,   -1,  329,   -1,  331,   -1,   -1,  334,
  335,  336,   -1,   -1,  339,  340,  341,  342,  343,  344,
  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  309,  310,  311,
  312,  260,  314,  315,  316,   -1,   -1,   -1,  267,  268,
   -1,   -1,  324,  325,  326,   -1,   -1,  329,   -1,  331,
   -1,   -1,  334,  335,  336,   -1,   -1,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  309,  310,  311,  312,  260,  314,  315,  316,   -1,   -1,
   -1,  267,  268,   -1,   -1,  324,  325,  326,   -1,   -1,
  329,   -1,   -1,   -1,   -1,  334,  335,  336,   -1,   -1,
  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  309,  310,  311,  312,  260,  314,  315,
  316,   -1,   -1,   -1,  267,  268,   -1,   -1,  324,  325,
  326,   -1,   -1,  329,   -1,   -1,   -1,   -1,  334,  335,
  336,   -1,   -1,  339,  340,  341,  342,  343,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  309,  310,  311,  312,
  260,  314,  315,  316,   -1,   -1,   -1,  267,  268,   -1,
   -1,  324,   -1,  326,   -1,   -1,  329,   -1,   -1,   -1,
   -1,  334,  335,  336,   -1,   -1,  339,  340,  341,  342,
  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,
  353,  354,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  309,
  310,  311,  312,  260,  314,  315,  316,   -1,   -1,   -1,
  267,  268,   -1,   -1,  324,   -1,  326,   -1,   -1,  329,
   -1,   -1,   -1,   -1,  334,  335,  336,   -1,   -1,  339,
  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  309,  310,  311,  312,  260,  314,  315,  316,
   -1,   -1,   -1,  267,  268,   -1,   -1,  324,   -1,   -1,
   -1,   -1,  329,   -1,   -1,   -1,   -1,   -1,  335,  336,
   -1,   -1,  339,  340,  341,  342,  343,  344,  345,  346,
  347,  348,  349,  350,  351,  352,  353,  354,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  309,  310,  311,   -1,   -1,
   -1,  315,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  324,   -1,   -1,   -1,   -1,  329,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  261,  262,  263,   -1,   -1,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
   -1,  282,  283,  284,  285,  286,  287,  288,  289,  290,
  291,  292,  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  302,  303,  304,  305,   -1,  260,  261,  262,   -1,
   -1,   -1,  266,  267,  268,   -1,  317,  317,  318,  319,
  320,  321,  322,  323,   -1,  325,  326,  327,  328,   -1,
  330,  331,  332,   -1,  334,  336,  337,   -1,  339,  340,
  341,  342,  343,  344,  345,  346,  347,   -1,   -1,   -1,
   -1,   -1,   -1,  353,  354,  309,  310,  311,  312,   -1,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  257,
  334,  335,  336,   -1,   -1,  339,  340,  341,  342,  343,
  344,  345,  346,  347,  348,  349,  350,  351,  352,   -1,
   -1,   -1,   -1,   -1,  282,  283,  284,  285,  286,  287,
  288,  289,  290,  291,  292,  293,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  302,  303,  304,  305,   -1,   -1,
   -1,   -1,   -1,   -1,  312,   -1,   -1,   -1,   -1,  317,
   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  336,  337,
   -1,  339,  340,  341,  342,  343,  344,  345,  346,  347,
  282,  283,  284,  285,  286,  287,  288,  289,  290,  291,
  292,  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  302,  303,  304,  305,  257,  258,  259,  260,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  267,  268,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  336,  337,   -1,  339,  340,  341,
  342,  343,  344,  345,  346,  347,   -1,   -1,  301,   -1,
   -1,   -1,   -1,   -1,   -1,  308,   -1,   -1,  311,   -1,
  313,   -1,   -1,   -1,   -1,  318,  309,  310,   -1,   -1,
  267,  268,  315,   -1,   -1,   -1,   -1,  330,   -1,   -1,
   -1,  324,   -1,   -1,  337,   -1,  329,   -1,   -1,   -1,
   -1,   -1,   -1,  336,  347,   -1,  339,  340,  341,  342,
  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  309,  310,   -1,   -1,  267,  268,  315,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  324,   -1,   -1,
   -1,   -1,  329,   -1,   -1,   -1,   -1,   -1,   -1,  336,
   -1,   -1,  339,  340,  341,  342,  343,  344,  345,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  309,  310,
   -1,   -1,   -1,  314,  315,  267,  268,   -1,   -1,   -1,
   -1,   -1,   -1,  324,   -1,   -1,   -1,   -1,  329,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,  340,
  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
  351,  352,  353,  354,   -1,   -1,   -1,  309,  310,   -1,
   -1,   -1,   -1,  315,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  324,   -1,   -1,   -1,   -1,  329,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,  340,  341,
  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  282,  283,  284,  285,  286,  287,  288,
  289,  290,  291,  292,  293,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  302,  303,  304,  305,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  317,  282,
  283,  284,  285,  286,  287,  288,  289,  290,  291,  292,
  293,   -1,   -1,   -1,   -1,   -1,   -1,  336,  337,   -1,
  339,  340,  341,  342,  343,  344,  345,  346,  347,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  336,   -1,   -1,  339,  340,  341,  342,
  343,  344,  345,  346,  347,
};
}
final static short YYFINAL=1;
final static short YYMAXTOKEN=354;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"SEMI","DOT","DOTDOTDOT","COMMA","STAR","PERCENT","EQUALS",
"ANNOSTRING","ANNOCHAR","SLASH","PLUS","MINUS","STAREQUALS","SLASHEQUALS",
"PERCENTEQUALS","PLUSEQUALS","MINUSEQUALS","LESSTHAN2EQUALS",
"GREATERTHAN2EQUALS","GREATERTHAN3EQUALS","AMPERSANDEQUALS","CIRCUMFLEXEQUALS",
"VERTLINEEQUALS","PACKAGE","IMPORT","PUBLIC","PROTECTED","PRIVATE","STATIC",
"FINAL","ABSTRACT","NATIVE","STRICTFP","SYNCHRONIZED","TRANSIENT","VOLATILE",
"DEFAULT","MODULE","REQUIRES","EXPORTS","DYNAMIC","TO","USES","PROVIDES","WITH",
"CLASS","INTERFACE","ENUM","ANNOINTERFACE","THROWS","EXTENDS","IMPLEMENTS",
"SUPER","NEW","BRACEOPEN","BRACECLOSE","SQUAREOPEN","SQUARECLOSE","PARENOPEN",
"PARENCLOSE","LESSTHAN","GREATERTHAN","LESSEQUALS","GREATEREQUALS","LESSTHAN2",
"GREATERTHAN2","GREATERTHAN3","EXCLAMATION","AMPERSAND2","VERTLINE2","EQUALS2",
"NOTEQUALS","TILDE","AMPERSAND","VERTLINE","CIRCUMFLEX","VOID","QUERY","COLON",
"AT","CODEBLOCK","PARENBLOCK","BYTE","SHORT","INT","LONG","CHAR","FLOAT",
"DOUBLE","BOOLEAN","IDENTIFIER","BOOLEAN_LITERAL","INTEGER_LITERAL",
"FLOAT_LITERAL","CHAR_LITERAL","STRING_LITERAL","PLUSPLUS","MINUSMINUS",
};
final static String yyrule[] = {
"$accept : CompilationUnit",
"CompilationUnit : PackageDeclaration_opt ImportDeclarations_opt TypeDeclarations_opt",
"CompilationUnit : ImportDeclarations_opt ModuleDeclaration",
"$$1 :",
"ModuleDeclaration : Modifiers_opt MODULE ModuleName $$1 BRACEOPEN ModuleStatements_opt BRACECLOSE",
"ModuleName : QualifiedIdentifier",
"ModuleNameList : ModuleName",
"ModuleNameList : ModuleNameList COMMA ModuleName",
"ModuleStatement : REQUIRES RequiresModifiers_opt ModuleName SEMI",
"$$2 :",
"ModuleStatement : EXPORTS DYNAMIC QualifiedIdentifier $$2 ToDeclaration_opt SEMI",
"$$3 :",
"ModuleStatement : EXPORTS QualifiedIdentifier $$3 ToDeclaration_opt SEMI",
"ModuleStatement : USES Type SEMI",
"ModuleStatement : PROVIDES Type WITH Type SEMI",
"ModuleStatements_opt :",
"ModuleStatements_opt : ModuleStatements_opt ModuleStatement",
"RequiresModifier : PUBLIC",
"RequiresModifier : STATIC",
"RequiresModifiers_opt :",
"RequiresModifiers_opt : RequiresModifiers_opt RequiresModifier",
"ToDeclaration_opt :",
"ToDeclaration_opt : TO ModuleNameList",
"PackageDeclaration : package",
"PackageDeclaration : Annotation",
"PackageDeclaration_opt :",
"PackageDeclaration_opt : PackageDeclaration_opt PackageDeclaration",
"$$4 :",
"package : PACKAGE $$4 QualifiedIdentifier SEMI",
"ImportDeclaration : SingleTypeImportDeclaration",
"ImportDeclaration : TypeImportOnDemandDeclaration",
"ImportDeclaration : SingleStaticImportDeclaration",
"ImportDeclaration : StaticImportOnDemandDeclaration",
"ImportDeclarations_opt :",
"ImportDeclarations_opt : ImportDeclarations_opt ImportDeclaration",
"SingleTypeImportDeclaration : IMPORT QualifiedIdentifier SEMI",
"TypeImportOnDemandDeclaration : IMPORT QualifiedIdentifier DOT STAR SEMI",
"SingleStaticImportDeclaration : IMPORT STATIC QualifiedIdentifier SEMI",
"StaticImportOnDemandDeclaration : IMPORT STATIC QualifiedIdentifier DOT STAR SEMI",
"TypeDeclaration : ClassDeclaration",
"TypeDeclaration : InterfaceDeclaration",
"TypeDeclaration : SEMI",
"TypeDeclarations_opt :",
"$$5 :",
"TypeDeclarations_opt : TypeDeclarations_opt $$5 TypeDeclaration",
"ClassDeclaration : NormalClassDeclaration",
"ClassDeclaration : EnumDeclaration",
"$$6 :",
"NormalClassDeclaration : Modifiers_opt CLASS IDENTIFIER TypeParameters_opt Superclass_opt Superinterfaces_opt $$6 ClassBody",
"$$7 :",
"TypeParameters : LESSTHAN $$7 TypeParameterList GREATERTHAN",
"TypeParameters_opt :",
"TypeParameters_opt : TypeParameters",
"TypeParameterList : TypeParameter",
"TypeParameterList : TypeParameterList COMMA TypeParameter",
"Superclass_opt :",
"Superclass_opt : EXTENDS ReferenceType",
"Superinterfaces_opt :",
"Superinterfaces_opt : IMPLEMENTS TypeList",
"ClassBody : BRACEOPEN ClassBodyDeclarations_opt BRACECLOSE",
"ClassBody_opt :",
"ClassBody_opt : ClassBody",
"ClassBodyDeclaration : StaticInitializer",
"ClassBodyDeclaration : ClassMemberDeclaration",
"ClassBodyDeclaration : ConstructorDeclaration",
"ClassBodyDeclarations_opt :",
"$$8 :",
"ClassBodyDeclarations_opt : ClassBodyDeclarations_opt $$8 ClassBodyDeclaration",
"ClassMemberDeclaration : FieldDeclaration",
"ClassMemberDeclaration : MethodDeclaration",
"ClassMemberDeclaration : ClassDeclaration",
"ClassMemberDeclaration : InterfaceDeclaration",
"ClassMemberDeclaration : SEMI",
"$$9 :",
"FieldDeclaration : Modifiers_opt Type VariableDeclaratorId $$9 extrafields SEMI",
"extrafields :",
"$$10 :",
"extrafields : extrafields COMMA $$10 VariableDeclaratorId",
"VariableDeclaratorId : IDENTIFIER Dims_opt",
"MethodDeclaration : Modifiers_opt MethodHeader MethodBody",
"VariableInitializer : ArrayInitializer",
"VariableInitializer : Expression",
"$$11 :",
"MethodHeader : TypeParameters Type IDENTIFIER $$11 PARENOPEN FormalParameterList_opt PARENCLOSE Dims_opt Throws_opt",
"$$12 :",
"MethodHeader : Type IDENTIFIER $$12 PARENOPEN FormalParameterList_opt PARENCLOSE Dims_opt Throws_opt",
"FormalParameterList : FormalParameters COMMA LastFormalParameter",
"FormalParameterList : LastFormalParameter",
"FormalParameterList_opt :",
"FormalParameterList_opt : FormalParameterList",
"FormalParameters : FormalParameter",
"FormalParameters : FormalParameters COMMA FormalParameter",
"FormalParameter : Modifiers_opt Type VariableDeclaratorId",
"LastFormalParameter : Modifiers_opt Type DOTDOTDOT VariableDeclaratorId",
"LastFormalParameter : FormalParameter",
"Throws_opt :",
"Throws_opt : THROWS ExceptionTypeList",
"ExceptionTypeList : ClassOrInterfaceType",
"ExceptionTypeList : ExceptionTypeList COMMA ClassOrInterfaceType",
"MethodBody : CODEBLOCK",
"MethodBody : SEMI",
"StaticInitializer : Modifiers_opt CODEBLOCK",
"$$13 :",
"ConstructorDeclaration : Modifiers_opt IDENTIFIER $$13 PARENOPEN FormalParameterList_opt PARENCLOSE Throws_opt MethodBody",
"$$14 :",
"ConstructorDeclaration : Modifiers_opt TypeParameters IDENTIFIER $$14 PARENOPEN FormalParameterList_opt PARENCLOSE Throws_opt CODEBLOCK",
"$$15 :",
"EnumDeclaration : Modifiers_opt ENUM IDENTIFIER Superinterfaces_opt $$15 EnumBody",
"EnumBody : BRACEOPEN EnumConstants_opt EnumBodyDeclarations_opt BRACECLOSE",
"EnumConstants_opt :",
"EnumConstants_opt : EnumConstants_opt COMMA",
"EnumConstants_opt : EnumConstants_opt EnumConstant",
"$$16 :",
"EnumConstant : Annotations_opt IDENTIFIER $$16 Arguments_opt ClassBody_opt",
"EnumBodyDeclarations_opt :",
"EnumBodyDeclarations_opt : SEMI ClassBodyDeclarations_opt",
"InterfaceDeclaration : NormalInterfaceDeclaration",
"InterfaceDeclaration : AnnotationTypeDeclaration",
"$$17 :",
"NormalInterfaceDeclaration : Modifiers_opt INTERFACE IDENTIFIER TypeParameters_opt ExtendsInterfaces_opt $$17 ClassBody",
"ExtendsInterfaces : EXTENDS TypeList",
"ExtendsInterfaces_opt :",
"ExtendsInterfaces_opt : ExtendsInterfaces",
"$$18 :",
"AnnotationTypeDeclaration : Modifiers_opt ANNOINTERFACE IDENTIFIER $$18 ClassBody",
"$$19 :",
"Annotation : AT QualifiedIdentifier $$19 _AnnotationParens_opt",
"ElementValuePairList : ElementValuePair",
"ElementValuePairList : ElementValuePairList COMMA ElementValuePair",
"ElementValuePair : IDENTIFIER EQUALS ElementValue",
"ElementValue : ConditionalExpression",
"ElementValue : Annotation",
"ElementValue : ElementValueArrayInitializer",
"$$20 :",
"ElementValueArrayInitializer : $$20 BRACEOPEN ElementValues_opt BRACECLOSE",
"AnnotationElement_opt :",
"AnnotationElement_opt : ElementValuePairList",
"AnnotationElement_opt : ElementValue",
"ElementValues_opt :",
"ElementValues_opt : ElementValues_opt ElementValue",
"ElementValues_opt : ElementValues_opt COMMA",
"_AnnotationParens_opt :",
"_AnnotationParens_opt : PARENOPEN AnnotationElement_opt PARENCLOSE",
"Annotations_opt :",
"Annotations_opt : Annotations_opt Annotation",
"ArrayInitializer : BRACEOPEN VariableInitializerList_opt BRACECLOSE",
"VariableInitializerList : VariableInitializerList VariableInitializer",
"VariableInitializerList : VariableInitializerList COMMA",
"VariableInitializerList_opt :",
"VariableInitializerList_opt : VariableInitializerList",
"Primary : PrimaryNoNewArray",
"Primary : ArrayCreationExpression",
"PrimaryNoNewArray : Literal",
"PrimaryNoNewArray : PrimitiveType Dims_opt DOT CLASS",
"PrimaryNoNewArray : PARENOPEN Expression PARENCLOSE",
"PrimaryNoNewArray : ClassInstanceCreationExpression",
"PrimaryNoNewArray : QualifiedIdentifier DOT CLASS",
"PrimaryNoNewArray : QualifiedIdentifier Dims DOT CLASS",
"PrimaryNoNewArray : QualifiedIdentifier",
"PrimaryNoNewArray : MethodInvocation",
"ClassInstanceCreationExpression : NEW TypeArguments_opt IDENTIFIER TypeArgumentsOrDiamond_opt PARENOPEN ArgumentList_opt PARENCLOSE ClassBody_opt",
"ClassInstanceCreationExpression : NEW IDENTIFIER TypeArgumentsOrDiamond_opt PARENOPEN ArgumentList_opt PARENCLOSE ClassBody_opt",
"TypeArgumentsOrDiamond : TypeArguments",
"TypeArgumentsOrDiamond : LESSTHAN GREATERTHAN",
"TypeArgumentsOrDiamond_opt :",
"TypeArgumentsOrDiamond_opt : TypeArgumentsOrDiamond",
"MethodInvocation : IDENTIFIER PARENOPEN ArgumentList_opt PARENCLOSE",
"MethodInvocation : SUPER DOT TypeParameters_opt IDENTIFIER PARENOPEN ArgumentList_opt PARENCLOSE",
"MethodInvocation : QualifiedIdentifier DOT SUPER DOT TypeParameters_opt IDENTIFIER PARENOPEN ArgumentList_opt PARENCLOSE",
"MethodInvocation : QualifiedIdentifier DOT TypeParameters_opt IDENTIFIER PARENOPEN ArgumentList_opt PARENCLOSE",
"ArgumentList : Expression",
"ArgumentList : ArgumentList COMMA Expression",
"ArgumentList_opt :",
"ArgumentList_opt : ArgumentList",
"ArrayCreationExpression : NEW PrimitiveType DimExprs Dims_opt",
"ArrayCreationExpression : NEW ClassOrInterfaceType DimExprs Dims_opt",
"ArrayCreationExpression : NEW PrimitiveType Dims ArrayInitializer",
"ArrayCreationExpression : NEW ClassOrInterfaceType Dims ArrayInitializer",
"DimExprs : DimExpr",
"DimExprs : DimExprs DimExpr",
"DimExpr : SQUAREOPEN Expression SQUARECLOSE",
"Expression : AssignmentExpression",
"AssignmentExpression : ConditionalExpression",
"AssignmentExpression : Assignment",
"Assignment : LeftHandSide AssignmentOperator Expression",
"LeftHandSide : QualifiedIdentifier",
"AssignmentOperator : EQUALS",
"AssignmentOperator : STAREQUALS",
"AssignmentOperator : SLASHEQUALS",
"AssignmentOperator : PERCENTEQUALS",
"AssignmentOperator : PLUSEQUALS",
"AssignmentOperator : MINUSEQUALS",
"AssignmentOperator : LESSTHAN2EQUALS",
"AssignmentOperator : GREATERTHAN2EQUALS",
"AssignmentOperator : GREATERTHAN3EQUALS",
"AssignmentOperator : AMPERSANDEQUALS",
"AssignmentOperator : CIRCUMFLEXEQUALS",
"AssignmentOperator : VERTLINEEQUALS",
"ConditionalExpression : ConditionalOrExpression",
"ConditionalExpression : ConditionalOrExpression QUERY Expression COLON ConditionalExpression",
"ConditionalOrExpression : ConditionalAndExpression",
"ConditionalOrExpression : ConditionalOrExpression VERTLINE2 ConditionalAndExpression",
"ConditionalAndExpression : InclusiveOrExpression",
"ConditionalAndExpression : ConditionalAndExpression AMPERSAND2 InclusiveOrExpression",
"InclusiveOrExpression : ExclusiveOrExpression",
"InclusiveOrExpression : InclusiveOrExpression VERTLINE ExclusiveOrExpression",
"ExclusiveOrExpression : AndExpression",
"ExclusiveOrExpression : ExclusiveOrExpression CIRCUMFLEX AndExpression",
"AndExpression : EqualityExpression",
"AndExpression : AndExpression AMPERSAND EqualityExpression",
"EqualityExpression : RelationalExpression",
"EqualityExpression : EqualityExpression EQUALS2 RelationalExpression",
"EqualityExpression : EqualityExpression NOTEQUALS RelationalExpression",
"RelationalExpression : ShiftExpression",
"RelationalExpression : RelationalExpression LESSTHAN ShiftExpression",
"RelationalExpression : RelationalExpression GREATERTHAN ShiftExpression",
"RelationalExpression : RelationalExpression LESSEQUALS ShiftExpression",
"RelationalExpression : RelationalExpression GREATEREQUALS ShiftExpression",
"ShiftExpression : AdditiveExpression",
"ShiftExpression : ShiftExpression LESSTHAN2 AdditiveExpression",
"ShiftExpression : ShiftExpression GREATERTHAN2 AdditiveExpression",
"ShiftExpression : ShiftExpression GREATERTHAN3 AdditiveExpression",
"AdditiveExpression : MultiplicativeExpression",
"AdditiveExpression : AdditiveExpression PLUS MultiplicativeExpression",
"AdditiveExpression : AdditiveExpression MINUS MultiplicativeExpression",
"MultiplicativeExpression : UnaryExpression",
"MultiplicativeExpression : MultiplicativeExpression STAR UnaryExpression",
"MultiplicativeExpression : MultiplicativeExpression SLASH UnaryExpression",
"MultiplicativeExpression : MultiplicativeExpression PERCENT UnaryExpression",
"UnaryExpression : PreIncrementExpression",
"UnaryExpression : PreDecrementExpression",
"UnaryExpression : PLUS UnaryExpression",
"UnaryExpression : MINUS UnaryExpression",
"UnaryExpression : UnaryExpressionNotPlusMinus",
"PreIncrementExpression : PLUSPLUS UnaryExpression",
"PreDecrementExpression : MINUSMINUS UnaryExpression",
"UnaryExpressionNotPlusMinus : PostfixExpression",
"UnaryExpressionNotPlusMinus : TILDE UnaryExpression",
"UnaryExpressionNotPlusMinus : EXCLAMATION UnaryExpression",
"UnaryExpressionNotPlusMinus : CastExpression",
"PostfixExpression : Primary",
"PostfixExpression : PostIncrementExpression",
"PostfixExpression : PostDecrementExpression",
"PostIncrementExpression : PostfixExpression PLUSPLUS",
"PostDecrementExpression : PostfixExpression MINUSMINUS",
"CastExpression : PARENOPEN PrimitiveType Dims_opt PARENCLOSE UnaryExpression",
"CastExpression : PARENOPEN QualifiedIdentifier PARENCLOSE UnaryExpressionNotPlusMinus",
"CastExpression : PARENOPEN QualifiedIdentifier Dims PARENCLOSE UnaryExpressionNotPlusMinus",
"Type : PrimitiveType",
"Type : ReferenceType",
"ReferenceType : ArrayType",
"ReferenceType : ClassOrInterfaceType",
"ArrayType : ClassOrInterfaceType Dims",
"ArrayType : PrimitiveType Dims",
"Dims : SQUAREOPEN SQUARECLOSE",
"Dims : Dims SQUAREOPEN SQUARECLOSE",
"Dims_opt :",
"Dims_opt : Dims",
"$$21 :",
"TypeParameter : IDENTIFIER $$21 TypeBound_opt",
"$$22 :",
"TypeBound : EXTENDS ClassOrInterfaceType $$22 AdditionalBound_opts",
"TypeBound_opt :",
"TypeBound_opt : TypeBound",
"AdditionalBound : AMPERSAND ClassOrInterfaceType",
"AdditionalBound_opts :",
"AdditionalBound_opts : AdditionalBound AdditionalBound_opts",
"$$23 :",
"TypeArguments : LESSTHAN $$23 TypeArgumentList GREATERTHAN",
"TypeArguments_opt :",
"TypeArguments_opt : TypeArguments",
"TypeArgumentList : TypeArgument",
"TypeArgumentList : TypeArgumentList COMMA TypeArgument",
"TypeArgument : ReferenceType",
"TypeArgument : Wildcard",
"Wildcard : QUERY WildcardBounds",
"Wildcard : QUERY",
"WildcardBounds : EXTENDS ReferenceType",
"WildcardBounds : SUPER ReferenceType",
"QualifiedIdentifier : IDENTIFIER",
"QualifiedIdentifier : QualifiedIdentifier DOT IDENTIFIER",
"PrimitiveType : BYTE",
"PrimitiveType : SHORT",
"PrimitiveType : CHAR",
"PrimitiveType : INT",
"PrimitiveType : LONG",
"PrimitiveType : FLOAT",
"PrimitiveType : DOUBLE",
"PrimitiveType : BOOLEAN",
"$$24 :",
"ClassOrInterfaceType : TypeDeclSpecifier $$24 TypeArguments_opt",
"TypeDeclSpecifier : QualifiedIdentifier",
"TypeDeclSpecifier : ClassOrInterfaceType DOT IDENTIFIER",
"TypeList : ReferenceType",
"TypeList : TypeList COMMA ReferenceType",
"Modifiers_opt :",
"Modifiers_opt : Modifiers_opt Modifier",
"Modifier : Annotation",
"Modifier : PUBLIC",
"Modifier : PROTECTED",
"Modifier : PRIVATE",
"Modifier : STATIC",
"Modifier : FINAL",
"Modifier : ABSTRACT",
"Modifier : NATIVE",
"Modifier : SYNCHRONIZED",
"Modifier : VOLATILE",
"Modifier : TRANSIENT",
"Modifier : STRICTFP",
"Modifier : DEFAULT",
"Arguments_opt :",
"Arguments_opt : PARENOPEN ArgumentList_opt PARENCLOSE",
"Literal : INTEGER_LITERAL",
"Literal : FLOAT_LITERAL",
"Literal : CHAR_LITERAL",
"Literal : STRING_LITERAL",
"Literal : BOOLEAN_LITERAL",
};

//#line 1738 "/usr/local/src/qdox/src/grammar/parser.y"

private JavaLexer lexer;
private Builder builder;
private StringBuilder textBuffer = new StringBuilder();
private ClassDef cls = new ClassDef();
private MethodDef mth = new MethodDef();
private FieldDef fd;
private ModuleDef.ExportsDef exp; 
private List<TypeVariableDef> typeParams = new LinkedList<TypeVariableDef>(); //for both JavaClass and JavaMethod
private LinkedList<AnnoDef> annotationStack = new LinkedList<AnnoDef>(); // Use LinkedList instead of Stack because it is unsynchronized 
private List<List<ElemValueDef>> annoValueListStack = new LinkedList<List<ElemValueDef>>(); // Use LinkedList instead of Stack because it is unsynchronized
private List<ElemValueDef> annoValueList = null;
private FieldDef param = new FieldDef();
private java.util.Set<String> modifiers = new java.util.LinkedHashSet<String>();
private TypeDef fieldType;
private TypeVariableDef typeVariable;
private Stack<TypeDef> typeStack = new Stack<TypeDef>();
private List<TypeDef> typeList = new LinkedList<TypeDef>();
private int line;
private int column;
private boolean debugLexer;

private void appendToBuffer(String word) {
    if (textBuffer.length() > 0) {
        char lastChar = textBuffer.charAt(textBuffer.length() - 1);
        if (!Character.isWhitespace(lastChar)) {
            textBuffer.append(' ');
        }
    }
    textBuffer.append(word);
}

private String buffer() {
    String result = textBuffer.toString().trim();
    textBuffer.setLength(0);
    return result;
}

public Parser( JavaLexer lexer, Builder builder ) 
{
    lexer.addCommentHandler( this );
    this.lexer = lexer;
    this.builder = builder;
}

public void setDebugParser(boolean debug) {
    yydebug = debug;
}

public void setDebugLexer(boolean debug) {
    debugLexer = debug;
}

/**
 * Parse file. Return true if successful.
 */
public boolean parse() {
    return yyparse() == 0;
}

private int yylex() {
    try {
        final int result = lexer.lex();
        yylval = new Value();
        yylval.sval = lexer.text();
        if (debugLexer) {
            System.err.println("Token: " + yyname[result] + " \"" + yylval.sval + "\"");
        }
        return result;
    }
    catch(IOException e) {
        return 0;
    }
}

private void yyerror(String msg) {
    throw new ParseException(msg, lexer.getLine(), lexer.getColumn());
}

private class Value {
    Object oval;
    String sval;
    int ival;
    boolean bval;
    TypeDef type;
    ElemValueDef annoval;
}


private void makeField(TypeDef field, String body, boolean enumConstant) {
    fd = new FieldDef( field.getName() );
    fd.setName(field.getName());
    fd.setLineNumber(line);
    fd.getModifiers().addAll(modifiers); 
    fd.setType( fieldType );
    fd.setDimensions(field.getDimensions());
    fd.setEnumConstant(enumConstant);
    fd.setBody(body);
}

public void onComment( String comment, int line, int column ) {
  DefaultJavaCommentLexer commentLexer  = new DefaultJavaCommentLexer( new java.io.StringReader( comment ) );
  commentLexer.setLineOffset( line );
  commentLexer.setColumnOffset( column );
  DefaultJavaCommentParser commentParser = new DefaultJavaCommentParser( commentLexer, builder);
  commentParser.setDebugLexer( this.debugLexer );
  commentParser.setDebugParser( this.yydebug );
  commentParser.parse();
}
//#line 1708 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 3:
//#line 87 "/usr/local/src/qdox/src/grammar/parser.y"
{
                     builder.setModule(new ModuleDef(val_peek(0).sval));
                   }
break;
case 6:
//#line 98 "/usr/local/src/qdox/src/grammar/parser.y"
{
                  exp.getTargets().add(val_peek(0).sval);
                }
break;
case 7:
//#line 101 "/usr/local/src/qdox/src/grammar/parser.y"
{
                  exp.getTargets().add(val_peek(0).sval);
                }
break;
case 8:
//#line 111 "/usr/local/src/qdox/src/grammar/parser.y"
{
                   ModuleDef.RequiresDef req = new ModuleDef.RequiresDef(val_peek(1).sval, modifiers);
                   modifiers = new java.util.LinkedHashSet<String>();
                   req.setLineNumber(line);
                   builder.addRequires(req);
                 }
break;
case 9:
//#line 117 "/usr/local/src/qdox/src/grammar/parser.y"
{
                   exp = new ModuleDef.ExportsDef(val_peek(0).sval, java.util.Collections.singleton("dynamic"));
                   exp.setLineNumber(line);
                 }
break;
case 10:
//#line 121 "/usr/local/src/qdox/src/grammar/parser.y"
{
                   builder.addExports(exp);
                 }
break;
case 11:
//#line 125 "/usr/local/src/qdox/src/grammar/parser.y"
{
                   exp = new ModuleDef.ExportsDef(val_peek(0).sval);
                   exp.setLineNumber(line);
                 }
break;
case 12:
//#line 130 "/usr/local/src/qdox/src/grammar/parser.y"
{
                   builder.addExports(exp);
                 }
break;
case 13:
//#line 133 "/usr/local/src/qdox/src/grammar/parser.y"
{
                   ModuleDef.UsesDef uss = new ModuleDef.UsesDef (val_peek(1).type);
                   uss.setLineNumber(line);
                   builder.addUses(uss);
                 }
break;
case 14:
//#line 138 "/usr/local/src/qdox/src/grammar/parser.y"
{
                   ModuleDef.ProvidesDef prv = new ModuleDef.ProvidesDef(val_peek(3).type, val_peek(1).type);
                   prv.setLineNumber(line);
                   builder.addProvides(prv);
                 }
break;
case 17:
//#line 148 "/usr/local/src/qdox/src/grammar/parser.y"
{ modifiers.add("public"); }
break;
case 18:
//#line 149 "/usr/local/src/qdox/src/grammar/parser.y"
{ modifiers.add("static"); }
break;
case 27:
//#line 171 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
           line = lexer.getLine(); 
         }
break;
case 28:
//#line 175 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
           builder.addPackage(new PackageDef(val_peek(1).sval, line)); 
         }
break;
case 35:
//#line 197 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                               builder.addImport( val_peek(1).sval ); 
                             }
break;
case 36:
//#line 205 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                                 builder.addImport( val_peek(3).sval + ".*" ); 
                               }
break;
case 37:
//#line 213 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                                 builder.addImport( "static " + val_peek(1).sval);
                               }
break;
case 38:
//#line 221 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                                   builder.addImport( "static " + val_peek(3).sval + ".*" ); 
                                 }
break;
case 43:
//#line 236 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                        line = lexer.getLine(); 
                      }
break;
case 47:
//#line 256 "/usr/local/src/qdox/src/grammar/parser.y"
{
                          cls.setType(ClassDef.CLASS);
                          cls.setLineNumber(line);
                          cls.getModifiers().addAll(modifiers); modifiers.clear(); 
                          cls.setName( val_peek(3).sval );
                          cls.setTypeParameters(typeParams);
                          builder.beginClass(cls); 
                          cls = new ClassDef(); 
                        }
break;
case 48:
//#line 266 "/usr/local/src/qdox/src/grammar/parser.y"
{
                          builder.endClass(); 
                        }
break;
case 49:
//#line 274 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                  typeParams = new LinkedList<TypeVariableDef>(); 
                }
break;
case 56:
//#line 293 "/usr/local/src/qdox/src/grammar/parser.y"
{
                  cls.getExtends().add(val_peek(0).type);
                }
break;
case 58:
//#line 302 "/usr/local/src/qdox/src/grammar/parser.y"
{
                       cls.getImplements().addAll( typeList );
                     }
break;
case 66:
//#line 331 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                             line = lexer.getLine(); 
                           }
break;
case 73:
//#line 353 "/usr/local/src/qdox/src/grammar/parser.y"
{
                    fieldType = val_peek(1).type;
                    /* we're doing some lexer magic: lexer.getCodeBody() contains [= VariableInitializer]*/
                    makeField(val_peek(0).type, lexer.getCodeBody(), false);
                    builder.beginField(fd);
                    builder.endField();
                  }
break;
case 74:
//#line 361 "/usr/local/src/qdox/src/grammar/parser.y"
{
                    modifiers.clear();
                  }
break;
case 76:
//#line 368 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
               line = lexer.getLine();
             }
break;
case 77:
//#line 372 "/usr/local/src/qdox/src/grammar/parser.y"
{
               /* we're doing some lexer magic: lexer.getCodeBody() contains [= VariableInitializer]*/
               makeField(val_peek(0).type, lexer.getCodeBody(), false);
               builder.beginField(fd);
               builder.endField();
             }
break;
case 78:
//#line 383 "/usr/local/src/qdox/src/grammar/parser.y"
{
                        yyval.type = new TypeDef(val_peek(1).sval,val_peek(0).ival);
                      }
break;
case 79:
//#line 391 "/usr/local/src/qdox/src/grammar/parser.y"
{
                     mth.setBody(val_peek(0).sval);
                     builder.endMethod(mth);
                     mth = new MethodDef();
                   }
break;
case 82:
//#line 412 "/usr/local/src/qdox/src/grammar/parser.y"
{
                builder.beginMethod();
                mth.setLineNumber(lexer.getLine());
                mth.getModifiers().addAll(modifiers); modifiers.clear();
                mth.setTypeParams(typeParams);
                mth.setReturnType(val_peek(1).type);
                mth.setName(val_peek(0).sval);
              }
break;
case 83:
//#line 421 "/usr/local/src/qdox/src/grammar/parser.y"
{
                mth.setDimensions(val_peek(1).ival);
              }
break;
case 84:
//#line 425 "/usr/local/src/qdox/src/grammar/parser.y"
{
                builder.beginMethod();
                mth.setLineNumber(lexer.getLine());
                mth.getModifiers().addAll(modifiers); modifiers.clear();
                mth.setReturnType(val_peek(1).type);
                mth.setName(val_peek(0).sval);
              }
break;
case 85:
//#line 433 "/usr/local/src/qdox/src/grammar/parser.y"
{
                mth.setDimensions(val_peek(1).ival);
              }
break;
case 92:
//#line 459 "/usr/local/src/qdox/src/grammar/parser.y"
{
                    param.getModifiers().addAll(modifiers); modifiers.clear();
                    param.setType(val_peek(1).type);
                    param.setName(val_peek(0).type.getName());
                    param.setDimensions(val_peek(0).type.getDimensions());
                    param.setVarArgs(false);
                    builder.addParameter(param);
                    param = new FieldDef();
                 }
break;
case 93:
//#line 474 "/usr/local/src/qdox/src/grammar/parser.y"
{
                       param.getModifiers().addAll(modifiers); modifiers.clear();
                       param.setType(val_peek(2).type);
	                   param.setName(val_peek(0).type.getName());
                       param.setDimensions(val_peek(0).type.getDimensions());
                       param.setVarArgs(true);
                       builder.addParameter(param);
                       param = new FieldDef();
                     }
break;
case 97:
//#line 499 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                     mth.getExceptions().add(val_peek(0).type); 
                   }
break;
case 98:
//#line 503 "/usr/local/src/qdox/src/grammar/parser.y"
{
                     mth.getExceptions().add(val_peek(0).type);
                   }
break;
case 99:
//#line 512 "/usr/local/src/qdox/src/grammar/parser.y"
{
              yyval.sval = lexer.getCodeBody();
            }
break;
case 100:
//#line 516 "/usr/local/src/qdox/src/grammar/parser.y"
{
             yyval.sval = "";
           }
break;
case 101:
//#line 532 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                     InitDef def = new InitDef();
                     def.setStatic(modifiers.contains("static"));modifiers.clear();
                     def.setBlockContent(lexer.getCodeBody());
                     builder.addInitializer(def);
                   }
break;
case 102:
//#line 543 "/usr/local/src/qdox/src/grammar/parser.y"
{
                          builder.beginConstructor();
                          mth.setLineNumber(lexer.getLine());
                          mth.getModifiers().addAll(modifiers); modifiers.clear();
                          mth.setConstructor(true); 
                          mth.setName(val_peek(0).sval);
                        }
break;
case 103:
//#line 551 "/usr/local/src/qdox/src/grammar/parser.y"
{
                          mth.setBody(val_peek(0).sval);
                          builder.endConstructor(mth);
                          mth = new MethodDef(); 
                        }
break;
case 104:
//#line 557 "/usr/local/src/qdox/src/grammar/parser.y"
{
                          builder.beginConstructor();
                          mth.setLineNumber(lexer.getLine());
                          mth.setTypeParams(typeParams);
                          mth.getModifiers().addAll(modifiers); modifiers.clear();
                          mth.setConstructor(true); 
                          mth.setName(val_peek(0).sval);
                        }
break;
case 105:
//#line 566 "/usr/local/src/qdox/src/grammar/parser.y"
{
                          mth.setBody(lexer.getCodeBody());
                          builder.endConstructor(mth);
                          mth = new MethodDef(); 
                        }
break;
case 106:
//#line 587 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                   cls.setLineNumber(line);
                   cls.getModifiers().addAll(modifiers);
                   cls.setName( val_peek(1).sval );
                   cls.setType(ClassDef.ENUM);
                   builder.beginClass(cls);
                   cls = new ClassDef();
                   fieldType = new TypeDef(val_peek(1).sval, 0);
                 }
break;
case 108:
//#line 605 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
            builder.endClass();
            fieldType = null;
            modifiers.clear();
          }
break;
case 112:
//#line 626 "/usr/local/src/qdox/src/grammar/parser.y"
{
                TypeDef td = new TypeDef(val_peek(0).sval, 0);
                typeStack.push(td); 
                makeField( td, "", true );
                builder.beginField( fd );
              }
break;
case 113:
//#line 633 "/usr/local/src/qdox/src/grammar/parser.y"
{
                builder.endField();
                typeStack.pop();
              }
break;
case 118:
//#line 659 "/usr/local/src/qdox/src/grammar/parser.y"
{
                              cls.setType(ClassDef.INTERFACE);
                              cls.setLineNumber(line);
                              cls.getModifiers().addAll(modifiers); modifiers.clear(); 
                              cls.setName( val_peek(2).sval );
                              cls.setTypeParameters(typeParams);
                              builder.beginClass(cls); 
                              cls = new ClassDef(); 
                            }
break;
case 119:
//#line 669 "/usr/local/src/qdox/src/grammar/parser.y"
{
                              builder.endClass(); 
                            }
break;
case 120:
//#line 677 "/usr/local/src/qdox/src/grammar/parser.y"
{
                     cls.getExtends().addAll( typeList );
                     typeList.clear();
                   }
break;
case 123:
//#line 708 "/usr/local/src/qdox/src/grammar/parser.y"
{
                             cls.setType(ClassDef.ANNOTATION_TYPE);
                             cls.setLineNumber(line);
                             cls.getModifiers().addAll(modifiers); modifiers.clear(); 
                             cls.setName( val_peek(0).sval );
                             builder.beginClass(cls); 
                             cls = new ClassDef();
                           }
break;
case 124:
//#line 717 "/usr/local/src/qdox/src/grammar/parser.y"
{
                             builder.endClass(); 
                           }
break;
case 125:
//#line 749 "/usr/local/src/qdox/src/grammar/parser.y"
{
              AnnoDef annotation = new AnnoDef( new TypeDef(val_peek(0).sval) );
              annotation.setLineNumber(lexer.getLine());
              annotationStack.addFirst(annotation);
            }
break;
case 126:
//#line 755 "/usr/local/src/qdox/src/grammar/parser.y"
{
              AnnoDef annotation = annotationStack.removeFirst();
              if(annotationStack.isEmpty()) 
              {
                builder.addAnnotation(annotation);
              }
              yyval.annoval = annotation;
            }
break;
case 129:
//#line 774 "/usr/local/src/qdox/src/grammar/parser.y"
{
                    annotationStack.getFirst().getArgs().put(val_peek(2).sval, val_peek(0).annoval);
                  }
break;
case 133:
//#line 794 "/usr/local/src/qdox/src/grammar/parser.y"
{
                                annoValueListStack.add(annoValueList);
                                annoValueList = new LinkedList<ElemValueDef>();
                              }
break;
case 134:
//#line 799 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                                yyval.annoval = new ElemValueListDef(annoValueList);
                                annoValueList = annoValueListStack.remove(annoValueListStack.size() - 1);
                              }
break;
case 137:
//#line 812 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                         annotationStack.getFirst().getArgs().put("value", val_peek(0).annoval);
                       }
break;
case 139:
//#line 820 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                     annoValueList.add(val_peek(0).annoval); 
                   }
break;
case 153:
//#line 876 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                     yyval.annoval = new TypeRefDef(new TypeDef(val_peek(3).type.getName(), val_peek(2).ival));
                   }
break;
case 154:
//#line 880 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                     yyval.annoval = new ParenExpressionDef(val_peek(1).annoval); 
                   }
break;
case 156:
//#line 885 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                     yyval.annoval = new TypeRefDef(new TypeDef(val_peek(2).sval, 0));
                   }
break;
case 157:
//#line 889 "/usr/local/src/qdox/src/grammar/parser.y"
{
                     yyval.annoval = new TypeRefDef(new TypeDef(val_peek(3).sval, val_peek(2).ival));
                   }
break;
case 158:
//#line 893 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                     yyval.annoval = new FieldRefDef(val_peek(0).sval); 
                   }
break;
case 160:
//#line 905 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                                   CreatorDef creator = new CreatorDef();
                                   creator.setCreatedName( val_peek(5).sval );
                                   yyval.annoval = creator; 
                                 }
break;
case 161:
//#line 911 "/usr/local/src/qdox/src/grammar/parser.y"
{
                                   CreatorDef creator = new CreatorDef();
                                   creator.setCreatedName( val_peek(5).sval );
                                   yyval.annoval = creator; 
                                 }
break;
case 166:
//#line 944 "/usr/local/src/qdox/src/grammar/parser.y"
{
                    yyval.annoval = new MethodInvocationDef(val_peek(3).sval, null);
                  }
break;
case 167:
//#line 948 "/usr/local/src/qdox/src/grammar/parser.y"
{
                    yyval.annoval = new MethodInvocationDef(val_peek(6).sval, null);
                  }
break;
case 168:
//#line 952 "/usr/local/src/qdox/src/grammar/parser.y"
{
                    yyval.annoval = new MethodInvocationDef(val_peek(8).sval + ".super", null);
                  }
break;
case 169:
//#line 956 "/usr/local/src/qdox/src/grammar/parser.y"
{
                    yyval.annoval = new MethodInvocationDef(val_peek(6).sval, null);
                  }
break;
case 170:
//#line 964 "/usr/local/src/qdox/src/grammar/parser.y"
{
                builder.addArgument( (ExpressionDef) val_peek(0).annoval);
              }
break;
case 171:
//#line 968 "/usr/local/src/qdox/src/grammar/parser.y"
{
                builder.addArgument( (ExpressionDef) val_peek(0).annoval);
              }
break;
case 174:
//#line 991 "/usr/local/src/qdox/src/grammar/parser.y"
{
                           CreatorDef creator = new CreatorDef();
                           creator.setCreatedName( val_peek(2).type.getName() );
                           yyval.annoval = creator; 
                         }
break;
case 175:
//#line 997 "/usr/local/src/qdox/src/grammar/parser.y"
{
                           CreatorDef creator = new CreatorDef();
                           creator.setCreatedName( val_peek(2).type.getName() );
                           yyval.annoval = creator; 
                         }
break;
case 176:
//#line 1003 "/usr/local/src/qdox/src/grammar/parser.y"
{
                           CreatorDef creator = new CreatorDef();
                           creator.setCreatedName( val_peek(2).type.getName() );
                           yyval.annoval = creator; 
                         }
break;
case 177:
//#line 1009 "/usr/local/src/qdox/src/grammar/parser.y"
{
                           CreatorDef creator = new CreatorDef();
                           creator.setCreatedName( val_peek(2).type.getName() );
                           yyval.annoval = creator; 
                         }
break;
case 184:
//#line 1058 "/usr/local/src/qdox/src/grammar/parser.y"
{
              yyval.annoval = new AssignmentDef(val_peek(2).annoval, val_peek(1).sval, val_peek(0).annoval);
            }
break;
case 185:
//#line 1068 "/usr/local/src/qdox/src/grammar/parser.y"
{
                yyval.annoval = new FieldRefDef(val_peek(0).sval);
              }
break;
case 199:
//#line 1105 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                         yyval.annoval = new QueryDef(val_peek(4).annoval, val_peek(2).annoval, val_peek(0).annoval);
                       }
break;
case 201:
//#line 1115 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                           yyval.annoval = new LogicalOrDef(val_peek(2).annoval, val_peek(0).annoval);
                         }
break;
case 203:
//#line 1125 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                            yyval.annoval = new LogicalAndDef(val_peek(2).annoval, val_peek(0).annoval); 
                          }
break;
case 205:
//#line 1135 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                         yyval.annoval = new OrDef(val_peek(2).annoval, val_peek(0).annoval); 
                       }
break;
case 207:
//#line 1145 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                         yyval.annoval = new ExclusiveOrDef(val_peek(2).annoval, val_peek(0).annoval);
                       }
break;
case 209:
//#line 1155 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                 yyval.annoval = new AndDef(val_peek(2).annoval, val_peek(0).annoval); 
               }
break;
case 211:
//#line 1166 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                      yyval.annoval = new EqualsDef(val_peek(2).annoval, val_peek(0).annoval);
                    }
break;
case 212:
//#line 1170 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                      yyval.annoval = new NotEqualsDef(val_peek(2).annoval, val_peek(0).annoval); 
                    }
break;
case 214:
//#line 1184 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                        yyval.annoval = new LessThanDef(val_peek(2).annoval, val_peek(0).annoval); 
                      }
break;
case 215:
//#line 1188 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                        yyval.annoval = new GreaterThanDef(val_peek(2).annoval, val_peek(0).annoval); 
                      }
break;
case 216:
//#line 1192 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                        yyval.annoval = new LessEqualsDef(val_peek(2).annoval, val_peek(0).annoval);
                      }
break;
case 217:
//#line 1196 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                        yyval.annoval = new GreaterEqualsDef(val_peek(2).annoval, val_peek(0).annoval); 
                      }
break;
case 219:
//#line 1208 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                   yyval.annoval = new ShiftLeftDef(val_peek(2).annoval, val_peek(0).annoval);
                 }
break;
case 220:
//#line 1212 "/usr/local/src/qdox/src/grammar/parser.y"
{
                   yyval.annoval = new ShiftRightDef(val_peek(2).annoval, val_peek(0).annoval);
                 }
break;
case 221:
//#line 1216 "/usr/local/src/qdox/src/grammar/parser.y"
{
                   yyval.annoval = new UnsignedShiftRightDef(val_peek(2).annoval, val_peek(0).annoval);
                 }
break;
case 223:
//#line 1227 "/usr/local/src/qdox/src/grammar/parser.y"
{
                      yyval.annoval = new AddDef(val_peek(2).annoval, val_peek(0).annoval);
                    }
break;
case 224:
//#line 1231 "/usr/local/src/qdox/src/grammar/parser.y"
{
                      yyval.annoval = new SubtractDef(val_peek(2).annoval, val_peek(0).annoval);
                    }
break;
case 226:
//#line 1243 "/usr/local/src/qdox/src/grammar/parser.y"
{
                            yyval.annoval = new MultiplyDef(val_peek(2).annoval, val_peek(0).annoval);
                          }
break;
case 227:
//#line 1247 "/usr/local/src/qdox/src/grammar/parser.y"
{
                            yyval.annoval = new DivideDef(val_peek(2).annoval, val_peek(0).annoval);
                          }
break;
case 228:
//#line 1251 "/usr/local/src/qdox/src/grammar/parser.y"
{
                            yyval.annoval = new RemainderDef(val_peek(2).annoval, val_peek(0).annoval);
                          }
break;
case 231:
//#line 1265 "/usr/local/src/qdox/src/grammar/parser.y"
{
                   yyval.annoval = new PlusSignDef(val_peek(0).annoval);
                 }
break;
case 232:
//#line 1269 "/usr/local/src/qdox/src/grammar/parser.y"
{
                   yyval.annoval = new MinusSignDef(val_peek(0).annoval);
                 }
break;
case 234:
//#line 1278 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                          yyval.annoval = new PreIncrementDef(val_peek(0).annoval);
                        }
break;
case 235:
//#line 1286 "/usr/local/src/qdox/src/grammar/parser.y"
{
                          yyval.annoval = new PreDecrementDef(val_peek(0).annoval);
                        }
break;
case 237:
//#line 1298 "/usr/local/src/qdox/src/grammar/parser.y"
{
                               yyval.annoval = new NotDef(val_peek(0).annoval);
                             }
break;
case 238:
//#line 1302 "/usr/local/src/qdox/src/grammar/parser.y"
{
                               yyval.annoval = new LogicalNotDef(val_peek(0).annoval);
                             }
break;
case 243:
//#line 1321 "/usr/local/src/qdox/src/grammar/parser.y"
{
                           yyval.annoval = new PostIncrementDef(val_peek(1).annoval);
                         }
break;
case 244:
//#line 1329 "/usr/local/src/qdox/src/grammar/parser.y"
{
                           yyval.annoval = new PostDecrementDef(val_peek(1).annoval);
                         }
break;
case 245:
//#line 1339 "/usr/local/src/qdox/src/grammar/parser.y"
{
                  yyval.annoval = new CastDef(new TypeDef(val_peek(3).type.getName(), val_peek(2).ival), val_peek(0).annoval);
                }
break;
case 246:
//#line 1343 "/usr/local/src/qdox/src/grammar/parser.y"
{
                  yyval.annoval = new CastDef(new TypeDef(val_peek(2).sval, 0), val_peek(0).annoval);
                }
break;
case 247:
//#line 1347 "/usr/local/src/qdox/src/grammar/parser.y"
{
                  yyval.annoval = new CastDef(new TypeDef(val_peek(3).sval, val_peek(2).ival), val_peek(0).annoval);
                }
break;
case 252:
//#line 1399 "/usr/local/src/qdox/src/grammar/parser.y"
{
             TypeDef td = val_peek(1).type;
             td.setDimensions(val_peek(0).ival);
             yyval.type = td;
           }
break;
case 253:
//#line 1405 "/usr/local/src/qdox/src/grammar/parser.y"
{
             TypeDef td = val_peek(1).type;
             td.setDimensions(val_peek(0).ival);
             yyval.type = td;
           }
break;
case 254:
//#line 1415 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
        yyval.ival = 1;
      }
break;
case 255:
//#line 1419 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
        yyval.ival = val_peek(2).ival + 1;
      }
break;
case 256:
//#line 1422 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
            yyval.ival = 0; 
          }
break;
case 258:
//#line 1431 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                 typeVariable = new TypeVariableDef(val_peek(0).sval);
                 typeVariable.setBounds(new LinkedList<TypeDef>());
               }
break;
case 259:
//#line 1436 "/usr/local/src/qdox/src/grammar/parser.y"
{
                 typeParams.add(typeVariable);
                 typeVariable = null;
               }
break;
case 260:
//#line 1445 "/usr/local/src/qdox/src/grammar/parser.y"
{
             typeVariable.setBounds(new LinkedList<TypeDef>());
             typeVariable.getBounds().add(val_peek(0).type);
           }
break;
case 264:
//#line 1458 "/usr/local/src/qdox/src/grammar/parser.y"
{
                   typeVariable.getBounds().add(val_peek(0).type);
                 }
break;
case 267:
//#line 1469 "/usr/local/src/qdox/src/grammar/parser.y"
{
                 typeStack.peek().setActualArgumentTypes(new LinkedList<TypeDef>());
               }
break;
case 271:
//#line 1481 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                    (typeStack.peek()).getActualArgumentTypes().add(val_peek(0).type);
                  }
break;
case 272:
//#line 1485 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                    (typeStack.peek()).getActualArgumentTypes().add(val_peek(0).type);
                  }
break;
case 275:
//#line 1500 "/usr/local/src/qdox/src/grammar/parser.y"
{
            yyval.type = val_peek(0).type;
          }
break;
case 276:
//#line 1504 "/usr/local/src/qdox/src/grammar/parser.y"
{
            yyval.type = new WildcardTypeDef();
          }
break;
case 277:
//#line 1513 "/usr/local/src/qdox/src/grammar/parser.y"
{
                  yyval.type = new WildcardTypeDef(val_peek(0).type, "extends" );
                }
break;
case 278:
//#line 1517 "/usr/local/src/qdox/src/grammar/parser.y"
{
                  yyval.type = new WildcardTypeDef(val_peek(0).type, "super" ); 
                }
break;
case 280:
//#line 1527 "/usr/local/src/qdox/src/grammar/parser.y"
{
                       yyval.sval = val_peek(2).sval + '.' + val_peek(0).sval;
                     }
break;
case 281:
//#line 1553 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
             yyval.type = new TypeDef("byte"); 
           }
break;
case 282:
//#line 1557 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
             yyval.type = new TypeDef("short"); 
           }
break;
case 283:
//#line 1561 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
             yyval.type = new TypeDef("char");
           }
break;
case 284:
//#line 1565 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
             yyval.type = new TypeDef("int"); 
           }
break;
case 285:
//#line 1569 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
             yyval.type = new TypeDef("long"); 
           }
break;
case 286:
//#line 1573 "/usr/local/src/qdox/src/grammar/parser.y"
{
             yyval.type = new TypeDef("float");
           }
break;
case 287:
//#line 1577 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
             yyval.type = new TypeDef("double");
           }
break;
case 288:
//#line 1581 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
             yyval.type = new TypeDef("boolean"); 
           }
break;
case 289:
//#line 1592 "/usr/local/src/qdox/src/grammar/parser.y"
{
                        TypeDef td = new TypeDef(val_peek(0).sval,0);
                        yyval.type = typeStack.push(td);
                      }
break;
case 290:
//#line 1597 "/usr/local/src/qdox/src/grammar/parser.y"
{
                        yyval.type = typeStack.pop();
                      }
break;
case 292:
//#line 1605 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
                     yyval.sval = val_peek(2).type.getName() + '.' + val_peek(0).sval;
                   }
break;
case 293:
//#line 1618 "/usr/local/src/qdox/src/grammar/parser.y"
{
            typeList.add( val_peek(0).type );
          }
break;
case 294:
//#line 1622 "/usr/local/src/qdox/src/grammar/parser.y"
{
            typeList.add( val_peek(0).type );
          }
break;
case 298:
//#line 1645 "/usr/local/src/qdox/src/grammar/parser.y"
{
            modifiers.add("public");
          }
break;
case 299:
//#line 1649 "/usr/local/src/qdox/src/grammar/parser.y"
{
            modifiers.add("protected");
          }
break;
case 300:
//#line 1653 "/usr/local/src/qdox/src/grammar/parser.y"
{
            modifiers.add("private");
          }
break;
case 301:
//#line 1657 "/usr/local/src/qdox/src/grammar/parser.y"
{
            modifiers.add("static");
          }
break;
case 302:
//#line 1661 "/usr/local/src/qdox/src/grammar/parser.y"
{
            modifiers.add("final");
          }
break;
case 303:
//#line 1665 "/usr/local/src/qdox/src/grammar/parser.y"
{
            modifiers.add("abstract");
          }
break;
case 304:
//#line 1669 "/usr/local/src/qdox/src/grammar/parser.y"
{
            modifiers.add("native");
          }
break;
case 305:
//#line 1673 "/usr/local/src/qdox/src/grammar/parser.y"
{
            modifiers.add("synchronized");
          }
break;
case 306:
//#line 1677 "/usr/local/src/qdox/src/grammar/parser.y"
{
            modifiers.add("volatile");
          }
break;
case 307:
//#line 1681 "/usr/local/src/qdox/src/grammar/parser.y"
{
            modifiers.add("transient");
          }
break;
case 308:
//#line 1685 "/usr/local/src/qdox/src/grammar/parser.y"
{
            modifiers.add("strictfp");
          }
break;
case 309:
//#line 1689 "/usr/local/src/qdox/src/grammar/parser.y"
{
            modifiers.add("default");
          }
break;
case 312:
//#line 1712 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
           yyval.annoval = new ConstantDef(val_peek(0).sval, Integer.class); 
         }
break;
case 313:
//#line 1716 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
           yyval.annoval = new ConstantDef(val_peek(0).sval, Float.class); 
         }
break;
case 314:
//#line 1720 "/usr/local/src/qdox/src/grammar/parser.y"
{
           String s = lexer.getCodeBody(); 
           yyval.annoval = new ConstantDef(s, Character.class); 
         }
break;
case 315:
//#line 1725 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
           String s = lexer.getCodeBody(); 
           yyval.annoval = new ConstantDef(s, String.class); 
         }
break;
case 316:
//#line 1730 "/usr/local/src/qdox/src/grammar/parser.y"
{ 
           yyval.annoval = new ConstantDef(val_peek(0).sval, Boolean.class);
         }
break;
//#line 2923 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
//## The -Jnorun option was used ##
//## end of method run() ########################################



//## Constructors ###############################################
//## The -Jnoconstruct option was used ##
//###############################################################



}
//################### END OF CLASS ##############################
