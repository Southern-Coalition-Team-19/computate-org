/* The following code was generated by JFlex 1.4.3 on 2/7/19 10:03 PM */

package com.thoughtworks.qdox.parser.impl;

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import com.thoughtworks.qdox.parser.*;
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/7/19 10:03 PM from the specification file
 * <tt>/usr/local/src/qdox/src/grammar/lexer.flex</tt>
 */
public class JFlexLexer implements JavaLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ANNOTATION_NOARG = 40;
  public static final int CODEBLOCK = 8;
  public static final int CHAR = 16;
  public static final int SINGLELINECOMMENT = 18;
  public static final int JAVADOCTAG = 4;
  public static final int NAME = 30;
  public static final int ANNOTATION = 22;
  public static final int ANNOSTRING = 24;
  public static final int TYPE = 38;
  public static final int STRING = 14;
  public static final int MODULE = 36;
  public static final int ARGUMENTS = 28;
  public static final int ENUM = 34;
  public static final int JAVADOCLINE = 6;
  public static final int ANNOCHAR = 26;
  public static final int JAVADOC = 2;
  public static final int ASSIGNMENT = 12;
  public static final int PARENBLOCK = 10;
  public static final int YYINITIAL = 0;
  public static final int MULTILINECOMMENT = 20;
  public static final int ANNOTATIONTYPE = 32;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1,  1,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5, 
     6,  6,  7,  7,  8,  8,  9,  9, 10, 10, 11, 11,  9,  9, 12, 12, 
    13, 13, 14, 14, 15, 15, 16, 16, 17, 17
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\30\1\5\1\2\1\0\1\3\1\1\16\30\4\0\1\5\1\106"+
    "\1\103\1\0\1\27\1\77\1\72\1\104\1\41\1\67\1\4\1\100"+
    "\1\42\1\21\1\22\1\6\1\7\1\16\6\14\2\10\1\105\1\37"+
    "\1\70\1\75\1\71\1\73\1\31\1\12\1\15\1\12\1\23\1\20"+
    "\1\23\5\27\1\17\3\27\1\24\7\27\1\13\2\27\1\65\1\25"+
    "\1\66\1\101\1\11\1\0\1\44\1\53\1\45\1\34\1\36\1\56"+
    "\1\47\1\61\1\50\1\27\1\46\1\35\1\32\1\57\1\33\1\43"+
    "\1\76\1\51\1\55\1\52\1\26\1\54\1\63\1\64\1\60\1\62"+
    "\1\40\1\102\1\74\1\107\41\30\2\0\4\27\4\0\1\27\2\0"+
    "\1\30\7\0\1\27\4\0\1\27\5\0\27\27\1\0\37\27\1\0"+
    "\u01ca\27\4\0\14\27\16\0\5\27\7\0\1\27\1\0\1\27\21\0"+
    "\160\30\5\27\1\0\2\27\2\0\4\27\10\0\1\27\1\0\3\27"+
    "\1\0\1\27\1\0\24\27\1\0\123\27\1\0\213\27\1\0\5\30"+
    "\2\0\236\27\11\0\46\27\2\0\1\27\7\0\47\27\7\0\1\27"+
    "\1\0\55\30\1\0\1\30\1\0\2\30\1\0\2\30\1\0\1\30"+
    "\10\0\33\27\5\0\3\27\15\0\5\30\6\0\1\27\4\0\13\30"+
    "\5\0\53\27\37\30\4\0\2\27\1\30\143\27\1\0\1\27\10\30"+
    "\1\0\6\30\2\27\2\30\1\0\4\30\2\27\12\30\3\27\2\0"+
    "\1\27\17\0\1\30\1\27\1\30\36\27\33\30\2\0\131\27\13\30"+
    "\1\27\16\0\12\30\41\27\11\30\2\27\4\0\1\27\5\0\26\27"+
    "\4\30\1\27\11\30\1\27\3\30\1\27\5\30\22\0\31\27\3\30"+
    "\104\0\1\27\1\0\13\27\67\0\33\30\1\0\4\30\66\27\3\30"+
    "\1\27\22\30\1\27\7\30\12\27\2\30\2\0\12\30\1\0\7\27"+
    "\1\0\7\27\1\0\3\30\1\0\10\27\2\0\2\27\2\0\26\27"+
    "\1\0\7\27\1\0\1\27\3\0\4\27\2\0\1\30\1\27\7\30"+
    "\2\0\2\30\2\0\3\30\1\27\10\0\1\30\4\0\2\27\1\0"+
    "\3\27\2\30\2\0\12\30\4\27\7\0\1\27\5\0\3\30\1\0"+
    "\6\27\4\0\2\27\2\0\26\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\27\1\0\2\27\2\0\1\30\1\0\5\30\4\0\2\30\2\0"+
    "\3\30\3\0\1\30\7\0\4\27\1\0\1\27\7\0\14\30\3\27"+
    "\1\30\13\0\3\30\1\0\11\27\1\0\3\27\1\0\26\27\1\0"+
    "\7\27\1\0\2\27\1\0\5\27\2\0\1\30\1\27\10\30\1\0"+
    "\3\30\1\0\3\30\2\0\1\27\17\0\2\27\2\30\2\0\12\30"+
    "\1\0\1\27\17\0\3\30\1\0\10\27\2\0\2\27\2\0\26\27"+
    "\1\0\7\27\1\0\2\27\1\0\5\27\2\0\1\30\1\27\7\30"+
    "\2\0\2\30\2\0\3\30\10\0\2\30\4\0\2\27\1\0\3\27"+
    "\2\30\2\0\12\30\1\0\1\27\20\0\1\30\1\27\1\0\6\27"+
    "\3\0\3\27\1\0\4\27\3\0\2\27\1\0\1\27\1\0\2\27"+
    "\3\0\2\27\3\0\3\27\3\0\14\27\4\0\5\30\3\0\3\30"+
    "\1\0\4\30\2\0\1\27\6\0\1\30\16\0\12\30\11\0\1\27"+
    "\7\0\3\30\1\0\10\27\1\0\3\27\1\0\27\27\1\0\12\27"+
    "\1\0\5\27\3\0\1\27\7\30\1\0\3\30\1\0\4\30\7\0"+
    "\2\30\1\0\2\27\6\0\2\27\2\30\2\0\12\30\22\0\2\30"+
    "\1\0\10\27\1\0\3\27\1\0\27\27\1\0\12\27\1\0\5\27"+
    "\2\0\1\30\1\27\7\30\1\0\3\30\1\0\4\30\7\0\2\30"+
    "\7\0\1\27\1\0\2\27\2\30\2\0\12\30\1\0\2\27\17\0"+
    "\2\30\1\0\10\27\1\0\3\27\1\0\51\27\2\0\1\27\7\30"+
    "\1\0\3\30\1\0\4\30\1\27\10\0\1\30\10\0\2\27\2\30"+
    "\2\0\12\30\12\0\6\27\2\0\2\30\1\0\22\27\3\0\30\27"+
    "\1\0\11\27\1\0\1\27\2\0\7\27\3\0\1\30\4\0\6\30"+
    "\1\0\1\30\1\0\10\30\22\0\2\30\15\0\60\27\1\30\2\27"+
    "\7\30\4\0\10\27\10\30\1\0\12\30\47\0\2\27\1\0\1\27"+
    "\2\0\2\27\1\0\1\27\2\0\1\27\6\0\4\27\1\0\7\27"+
    "\1\0\3\27\1\0\1\27\1\0\1\27\2\0\2\27\1\0\4\27"+
    "\1\30\2\27\6\30\1\0\2\30\1\27\2\0\5\27\1\0\1\27"+
    "\1\0\6\30\2\0\12\30\2\0\4\27\40\0\1\27\27\0\2\30"+
    "\6\0\12\30\13\0\1\30\1\0\1\30\1\0\1\30\4\0\2\30"+
    "\10\27\1\0\44\27\4\0\24\30\1\0\2\30\5\27\13\30\1\0"+
    "\44\30\11\0\1\30\71\0\53\27\24\30\1\27\12\30\6\0\6\27"+
    "\4\30\4\27\3\30\1\27\3\30\2\27\7\30\3\27\4\30\15\27"+
    "\14\30\1\27\17\30\2\0\46\27\1\0\1\27\5\0\1\27\2\0"+
    "\53\27\1\0\u014d\27\1\0\4\27\2\0\7\27\1\0\1\27\1\0"+
    "\4\27\2\0\51\27\1\0\4\27\2\0\41\27\1\0\4\27\2\0"+
    "\7\27\1\0\1\27\1\0\4\27\2\0\17\27\1\0\71\27\1\0"+
    "\4\27\2\0\103\27\2\0\3\30\40\0\20\27\20\0\125\27\14\0"+
    "\u026c\27\2\0\21\27\1\0\32\27\5\0\113\27\3\0\3\27\17\0"+
    "\15\27\1\0\4\27\3\30\13\0\22\27\3\30\13\0\22\27\2\30"+
    "\14\0\15\27\1\0\3\27\1\0\2\30\14\0\64\27\40\30\3\0"+
    "\1\27\3\0\2\27\1\30\2\0\12\30\41\0\3\30\2\0\12\30"+
    "\6\0\130\27\10\0\51\27\1\30\1\27\5\0\106\27\12\0\35\27"+
    "\3\0\14\30\4\0\14\30\12\0\12\30\36\27\2\0\5\27\13\0"+
    "\54\27\4\0\21\30\7\27\2\30\6\0\12\30\46\0\27\27\5\30"+
    "\4\0\65\27\12\30\1\0\35\30\2\0\13\30\6\0\12\30\15\0"+
    "\1\27\130\0\5\30\57\27\21\30\7\27\4\0\12\30\21\0\11\30"+
    "\14\0\3\30\36\27\15\30\2\27\12\30\54\27\16\30\14\0\44\27"+
    "\24\30\10\0\12\30\3\0\3\27\12\30\44\27\122\0\3\30\1\0"+
    "\25\30\4\27\1\30\4\27\3\30\2\27\11\0\300\27\47\30\25\0"+
    "\4\30\u0116\27\2\0\6\27\2\0\46\27\2\0\6\27\2\0\10\27"+
    "\1\0\1\27\1\0\1\27\1\0\1\27\1\0\37\27\2\0\65\27"+
    "\1\0\7\27\1\0\1\27\3\0\3\27\1\0\7\27\3\0\4\27"+
    "\2\0\6\27\4\0\15\27\5\0\3\27\1\0\7\27\16\0\5\30"+
    "\32\0\5\30\20\0\2\27\23\0\1\27\13\0\5\30\5\0\6\30"+
    "\1\0\1\27\15\0\1\27\20\0\15\27\3\0\33\27\25\0\15\30"+
    "\4\0\1\30\3\0\14\30\21\0\1\27\4\0\1\27\2\0\12\27"+
    "\1\0\1\27\3\0\5\27\6\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\1\0\13\27\2\0\4\27\5\0\5\27\4\0\1\27"+
    "\21\0\51\27\u0a77\0\57\27\1\0\57\27\1\0\205\27\6\0\4\27"+
    "\3\30\2\27\14\0\46\27\1\0\1\27\5\0\1\27\2\0\70\27"+
    "\7\0\1\27\17\0\1\30\27\27\11\0\7\27\1\0\7\27\1\0"+
    "\7\27\1\0\7\27\1\0\7\27\1\0\7\27\1\0\7\27\1\0"+
    "\7\27\1\0\40\30\57\0\1\27\u01d5\0\3\27\31\0\11\27\6\30"+
    "\1\0\5\27\2\0\5\27\4\0\126\27\2\0\2\30\2\0\3\27"+
    "\1\0\132\27\1\0\4\27\5\0\51\27\3\0\136\27\21\0\33\27"+
    "\65\0\20\27\u0200\0\u19b6\27\112\0\u51cd\27\63\0\u048d\27\103\0\56\27"+
    "\2\0\u010d\27\3\0\20\27\12\30\2\27\24\0\57\27\1\30\4\0"+
    "\12\30\1\0\31\27\7\0\1\30\120\27\2\30\45\0\11\27\2\0"+
    "\147\27\2\0\4\27\1\0\4\27\14\0\13\27\115\0\12\27\1\30"+
    "\3\27\1\30\4\27\1\30\27\27\5\30\20\0\1\27\7\0\64\27"+
    "\14\0\2\30\62\27\21\30\13\0\12\30\6\0\22\30\6\27\3\0"+
    "\1\27\4\0\12\30\34\27\10\30\2\0\27\27\15\30\14\0\35\27"+
    "\3\0\4\30\57\27\16\30\16\0\1\27\12\30\46\0\51\27\16\30"+
    "\11\0\3\27\1\30\10\27\2\30\2\0\12\30\6\0\27\27\3\0"+
    "\1\27\1\30\4\0\60\27\1\30\1\27\3\30\2\27\2\30\5\27"+
    "\2\30\1\27\1\30\1\27\30\0\3\27\2\0\13\27\5\30\2\0"+
    "\3\27\2\30\12\0\6\27\2\0\6\27\2\0\6\27\11\0\7\27"+
    "\1\0\7\27\221\0\43\27\10\30\1\0\2\30\2\0\12\30\6\0"+
    "\u2ba4\27\14\0\27\27\4\0\61\27\u2104\0\u016e\27\2\0\152\27\46\0"+
    "\7\27\14\0\5\27\5\0\1\27\1\30\12\27\1\0\15\27\1\0"+
    "\5\27\1\0\1\27\1\0\2\27\1\0\2\27\1\0\154\27\41\0"+
    "\u016b\27\22\0\100\27\2\0\66\27\50\0\15\27\3\0\20\30\20\0"+
    "\7\30\14\0\2\27\30\0\3\27\31\0\1\27\6\0\5\27\1\0"+
    "\207\27\2\0\1\30\4\0\1\27\13\0\12\30\7\0\32\27\4\0"+
    "\1\27\1\0\32\27\13\0\131\27\3\0\6\27\2\0\6\27\2\0"+
    "\6\27\2\0\3\27\3\0\2\27\3\0\2\27\22\0\3\30\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\22\0\2\1\1\2\1\1\1\3\1\4\1\1\1\5"+
    "\2\3\1\6\1\7\1\10\1\11\11\3\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\3\25\1\26\1\27\1\1\1\30\1\31\1\25"+
    "\1\32\1\33\1\34\1\35\1\25\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\1\1\44\1\1\1\45\2\46"+
    "\1\1\1\2\1\47\2\50\1\51\1\4\1\52\2\3"+
    "\1\53\1\54\7\3\1\55\1\15\1\16\1\17\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\1\1\71\1\1\1\72\1\1\1\73"+
    "\1\74\2\3\1\75\1\76\1\4\3\3\1\77\5\3"+
    "\1\100\2\101\1\102\1\103\7\0\23\3\1\102\1\0"+
    "\1\104\1\0\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\50\1\113\3\0\1\50\2\0\1\113\1\0\1\114"+
    "\1\115\1\113\12\3\1\116\1\117\1\120\1\121\1\122"+
    "\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\132"+
    "\1\133\1\134\1\135\1\136\1\0\7\3\1\137\2\3"+
    "\1\0\1\140\3\0\1\141\2\0\23\3\1\142\1\3"+
    "\1\0\1\143\1\0\1\50\1\0\1\50\2\113\2\0"+
    "\4\3\1\144\5\3\1\145\1\146\1\147\1\0\10\3"+
    "\1\0\1\150\3\0\1\3\1\151\23\3\1\150\6\0"+
    "\1\3\1\152\1\3\1\153\1\154\1\155\2\3\1\156"+
    "\2\3\1\157\4\3\1\160\1\161\3\0\7\3\1\162"+
    "\6\3\1\163\3\3\1\164\1\3\1\113\2\0\1\3"+
    "\1\165\1\166\1\167\6\3\2\0\1\170\1\3\1\171"+
    "\4\3\1\172\3\3\1\173\1\3\1\174\2\3\1\175"+
    "\1\176\6\3\1\0\1\177\1\200\1\3\1\201\7\3"+
    "\1\202\1\203\1\204\1\205\2\3\1\0\1\3\1\206"+
    "\3\3\1\207\1\210\1\3\1\211\1\212\1\0\1\213"+
    "\1\3\1\214\1\215\1\3\1\216\1\217\2\3\1\220";

  private static int [] zzUnpackAction() {
    int [] result = new int[439];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0\0\u0438"+
    "\0\u0480\0\u04c8\0\u0510\0\u0558\0\u0510\0\u05a0\0\u05e8\0\u0630"+
    "\0\u0678\0\u06c0\0\u0708\0\u0750\0\u0510\0\u0510\0\u0510\0\u0510"+
    "\0\u0798\0\u07e0\0\u0828\0\u0870\0\u08b8\0\u0900\0\u0948\0\u0990"+
    "\0\u09d8\0\u0510\0\u0510\0\u0510\0\u0510\0\u0510\0\u0510\0\u0510"+
    "\0\u0510\0\u0a20\0\u0510\0\u0510\0\u0510\0\u0a68\0\u0ab0\0\u0510"+
    "\0\u0510\0\u0ab0\0\u0510\0\u0510\0\u0af8\0\u0510\0\u0510\0\u0510"+
    "\0\u0510\0\u0b40\0\u0510\0\u0510\0\u0510\0\u0510\0\u0510\0\u0510"+
    "\0\u0b88\0\u0510\0\u0bd0\0\u0510\0\u0c18\0\u0510\0\u0c60\0\u0ca8"+
    "\0\u0cf0\0\u0d38\0\u0d80\0\u0dc8\0\u0e10\0\u0510\0\u0e58\0\u0ea0"+
    "\0\u0510\0\u0510\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0\0\u1008\0\u1050"+
    "\0\u1098\0\u0510\0\u10e0\0\u1128\0\u1170\0\u0510\0\u11b8\0\u1200"+
    "\0\u1248\0\u1290\0\u12d8\0\u0510\0\u0510\0\u0510\0\u1320\0\u0510"+
    "\0\u1368\0\u0510\0\u13b0\0\u0510\0\u13f8\0\u0510\0\u0510\0\u1440"+
    "\0\u1488\0\u0510\0\u0510\0\u0510\0\u14d0\0\u1518\0\u1560\0\u0510"+
    "\0\u15a8\0\u15f0\0\u1638\0\u1680\0\u16c8\0\u0510\0\u1710\0\u0510"+
    "\0\u1758\0\u0510\0\u0678\0\u17a0\0\u17e8\0\u06c0\0\u1830\0\u1878"+
    "\0\u18c0\0\u1908\0\u1950\0\u1998\0\u19e0\0\u1a28\0\u1a70\0\u1ab8"+
    "\0\u1b00\0\u1b48\0\u1b90\0\u1bd8\0\u1c20\0\u1c68\0\u1cb0\0\u1cf8"+
    "\0\u1d40\0\u1d88\0\u1dd0\0\u1e18\0\u1e60\0\u0af8\0\u0510\0\u1ea8"+
    "\0\u0510\0\u0510\0\u0510\0\u0510\0\u0510\0\u0510\0\u1ef0\0\u1f38"+
    "\0\u1f80\0\u1fc8\0\u2010\0\u0510\0\u2058\0\u0e10\0\u0510\0\u20a0"+
    "\0\u0510\0\u0510\0\u20e8\0\u2130\0\u2178\0\u21c0\0\u2208\0\u2250"+
    "\0\u2298\0\u22e0\0\u2328\0\u2370\0\u23b8\0\u2400\0\u0510\0\u2448"+
    "\0\u0510\0\u0510\0\u0510\0\u0510\0\u0510\0\u0510\0\u0510\0\u0510"+
    "\0\u0510\0\u0510\0\u0510\0\u0510\0\u0510\0\u0510\0\u2490\0\u24d8"+
    "\0\u2520\0\u2568\0\u25b0\0\u25f8\0\u2640\0\u2688\0\u05e8\0\u26d0"+
    "\0\u2718\0\u2760\0\u0510\0\u27a8\0\u27f0\0\u2838\0\u0510\0\u2880"+
    "\0\u28c8\0\u2910\0\u2958\0\u29a0\0\u29e8\0\u2a30\0\u2a78\0\u2ac0"+
    "\0\u2b08\0\u2b50\0\u2b98\0\u2be0\0\u2c28\0\u2c70\0\u2cb8\0\u2d00"+
    "\0\u2d48\0\u2d90\0\u2dd8\0\u2e20\0\u05e8\0\u2e68\0\u2eb0\0\u0510"+
    "\0\u2ef8\0\u2f40\0\u2f88\0\u2fd0\0\u3018\0\u3060\0\u30a8\0\u30f0"+
    "\0\u3138\0\u3180\0\u31c8\0\u3210\0\u05e8\0\u3258\0\u32a0\0\u32e8"+
    "\0\u3330\0\u3378\0\u0510\0\u33c0\0\u0510\0\u3408\0\u3450\0\u3498"+
    "\0\u34e0\0\u3528\0\u3570\0\u35b8\0\u3600\0\u3648\0\u3690\0\u3408"+
    "\0\u36d8\0\u3720\0\u3768\0\u37b0\0\u05e8\0\u37f8\0\u3840\0\u3888"+
    "\0\u38d0\0\u3918\0\u3960\0\u39a8\0\u39f0\0\u3a38\0\u3a80\0\u3ac8"+
    "\0\u3b10\0\u3b58\0\u3ba0\0\u3be8\0\u3c30\0\u3c78\0\u3cc0\0\u3d08"+
    "\0\u0510\0\u3d50\0\u3d98\0\u3de0\0\u3e28\0\u3e70\0\u3eb8\0\u3f00"+
    "\0\u05e8\0\u3f48\0\u05e8\0\u05e8\0\u05e8\0\u3f90\0\u3fd8\0\u0510"+
    "\0\u4020\0\u4068\0\u05e8\0\u40b0\0\u40f8\0\u4140\0\u4188\0\u05e8"+
    "\0\u0510\0\u41d0\0\u4218\0\u4260\0\u42a8\0\u42f0\0\u4338\0\u4380"+
    "\0\u43c8\0\u4410\0\u4458\0\u05e8\0\u44a0\0\u44e8\0\u4530\0\u4578"+
    "\0\u45c0\0\u4608\0\u05e8\0\u4650\0\u4698\0\u46e0\0\u05e8\0\u4728"+
    "\0\u4770\0\u47b8\0\u4800\0\u4848\0\u05e8\0\u05e8\0\u05e8\0\u4890"+
    "\0\u48d8\0\u4920\0\u4968\0\u49b0\0\u49f8\0\u4a40\0\u4a88\0\u05e8"+
    "\0\u4ad0\0\u05e8\0\u4b18\0\u4b60\0\u4ba8\0\u4bf0\0\u05e8\0\u4c38"+
    "\0\u4c80\0\u4cc8\0\u05e8\0\u4d10\0\u05e8\0\u4d58\0\u4da0\0\u05e8"+
    "\0\u05e8\0\u4de8\0\u4e30\0\u4e78\0\u4ec0\0\u4f08\0\u4f50\0\u4f98"+
    "\0\u05e8\0\u05e8\0\u4fe0\0\u05e8\0\u5028\0\u5070\0\u50b8\0\u5100"+
    "\0\u5148\0\u5190\0\u51d8\0\u05e8\0\u05e8\0\u05e8\0\u05e8\0\u5220"+
    "\0\u5268\0\u52b0\0\u52f8\0\u05e8\0\u5340\0\u5388\0\u53d0\0\u05e8"+
    "\0\u05e8\0\u5418\0\u05e8\0\u05e8\0\u5460\0\u05e8\0\u54a8\0\u05e8"+
    "\0\u05e8\0\u54f0\0\u1830\0\u05e8\0\u5538\0\u5580\0\u05e8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[439];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\23\1\24\2\23\1\25\1\23\1\26\2\23\3\27"+
    "\1\23\1\27\1\23\2\27\1\23\1\30\2\27\1\31"+
    "\2\27\1\23\1\32\1\33\3\27\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\2\27\1\44\1\27"+
    "\1\45\1\27\1\46\1\47\1\50\1\51\5\27\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\27\4\23\1\63\1\64\4\23\1\24\106\23\1\65"+
    "\1\66\4\65\1\67\31\65\1\70\33\65\1\71\6\65"+
    "\1\63\1\64\3\65\1\23\1\24\4\23\1\72\32\23"+
    "\1\73\25\23\1\74\13\23\1\63\1\64\3\23\1\65"+
    "\1\66\4\65\1\67\13\65\1\75\14\65\1\76\1\77"+
    "\1\100\1\101\14\65\1\102\5\65\1\103\1\104\1\105"+
    "\1\106\1\107\2\65\1\110\6\65\1\63\1\64\3\65"+
    "\1\23\1\24\23\23\1\111\55\23\1\112\5\23\1\24"+
    "\23\23\1\113\56\23\1\114\4\23\1\115\1\116\106\23"+
    "\1\24\2\23\1\117\104\23\1\24\2\23\1\120\1\23"+
    "\1\121\1\122\1\123\3\27\1\123\1\27\1\123\2\27"+
    "\1\124\1\125\2\27\1\31\2\27\1\23\1\126\2\27"+
    "\1\127\1\130\1\27\1\23\1\131\1\132\1\40\2\27"+
    "\1\133\2\27\1\134\1\27\1\135\1\136\1\27\1\137"+
    "\1\140\1\141\5\27\2\23\1\142\1\143\1\144\1\145"+
    "\1\60\1\146\1\147\1\27\1\150\1\151\1\152\1\153"+
    "\1\154\1\155\1\156\1\157\1\160\1\23\1\24\23\23"+
    "\1\161\55\23\1\162\5\23\1\24\23\23\1\163\56\23"+
    "\1\164\4\23\1\24\2\23\1\25\1\23\1\165\2\23"+
    "\3\27\1\23\1\27\1\23\2\27\1\23\1\30\2\27"+
    "\1\31\2\27\1\23\1\32\4\27\1\34\1\166\2\167"+
    "\1\40\1\41\1\42\1\43\2\27\1\44\1\27\1\45"+
    "\1\27\1\46\1\47\1\50\1\51\5\27\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\27"+
    "\12\23\1\24\2\23\1\25\1\23\1\26\2\23\3\27"+
    "\1\23\1\27\1\23\2\27\1\23\1\30\2\27\1\31"+
    "\2\27\1\23\1\32\2\27\1\170\1\27\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\2\27\1\44"+
    "\1\27\1\45\1\27\1\46\1\47\1\50\1\51\5\27"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\27\4\23\1\63\1\64\4\23\1\24\2\23"+
    "\1\25\1\23\1\26\2\23\3\27\1\23\1\27\1\23"+
    "\2\27\1\23\1\30\2\27\1\31\2\27\1\23\1\32"+
    "\2\27\1\171\1\27\1\34\1\172\1\36\1\173\1\40"+
    "\1\41\1\42\1\43\2\27\1\44\1\27\1\45\1\27"+
    "\1\46\1\47\1\50\1\51\5\27\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\27\4\23"+
    "\1\63\1\64\4\23\1\24\7\23\3\27\1\23\1\27"+
    "\1\23\2\27\1\23\1\174\2\27\1\31\1\175\1\27"+
    "\2\23\2\27\1\176\1\27\1\177\1\35\1\200\1\23"+
    "\1\40\1\201\5\27\1\202\1\203\2\27\1\204\5\27"+
    "\1\205\1\27\7\23\1\206\1\23\1\27\12\23\1\24"+
    "\2\23\1\25\1\23\1\26\2\23\3\27\1\23\1\27"+
    "\1\23\2\27\1\23\1\30\2\27\1\31\2\27\1\23"+
    "\1\32\2\27\1\171\1\27\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\2\27\1\44\1\27\1\45"+
    "\1\27\1\46\1\47\1\50\1\51\5\27\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\27"+
    "\4\23\1\63\1\64\4\23\1\207\2\210\1\25\1\210"+
    "\1\165\2\23\3\27\1\23\1\27\1\23\2\27\1\23"+
    "\1\30\2\27\1\31\2\27\1\23\1\32\4\27\1\34"+
    "\1\23\1\36\1\23\1\40\1\41\1\42\1\43\2\27"+
    "\1\44\1\27\1\45\1\27\1\46\1\47\1\50\1\51"+
    "\5\27\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\27\11\23\112\0\1\23\111\0\1\211"+
    "\1\0\1\212\110\0\12\27\2\0\2\27\1\213\3\27"+
    "\1\0\5\27\4\0\22\27\11\0\1\27\33\0\1\214"+
    "\113\0\1\215\62\0\3\216\1\0\1\216\3\0\3\217"+
    "\1\0\1\217\1\0\2\217\2\0\2\217\1\220\2\217"+
    "\2\0\5\217\4\0\5\217\1\221\14\217\11\0\1\217"+
    "\20\0\12\27\2\0\2\27\1\213\3\27\1\0\1\27"+
    "\1\222\3\27\4\0\22\27\11\0\1\27\20\0\12\27"+
    "\2\0\2\27\1\213\3\27\1\0\5\27\4\0\14\27"+
    "\1\223\4\27\1\224\11\0\1\27\20\0\12\27\2\0"+
    "\2\27\1\213\1\225\2\27\1\0\5\27\4\0\1\27"+
    "\1\226\4\27\1\227\13\27\11\0\1\27\20\0\12\27"+
    "\2\0\2\27\1\213\3\27\1\0\5\27\4\0\10\27"+
    "\1\230\11\27\11\0\1\27\20\0\12\27\2\0\2\27"+
    "\1\213\3\27\1\0\3\27\1\231\1\27\4\0\22\27"+
    "\11\0\1\27\20\0\12\27\2\0\2\27\1\213\3\27"+
    "\1\0\1\232\4\27\4\0\14\27\1\233\5\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\3\27\1\0"+
    "\5\27\4\0\6\27\1\234\7\27\1\235\3\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\3\27\1\0"+
    "\1\27\1\236\3\27\4\0\22\27\11\0\1\27\20\0"+
    "\12\27\2\0\2\27\1\213\1\237\2\27\1\0\5\27"+
    "\4\0\7\27\1\240\5\27\1\241\4\27\11\0\1\27"+
    "\20\0\12\27\2\0\2\27\1\213\3\27\1\0\5\27"+
    "\4\0\5\27\1\242\14\27\11\0\1\27\20\0\12\27"+
    "\2\0\2\27\1\213\3\27\1\0\4\27\1\243\4\0"+
    "\1\27\1\244\20\27\11\0\1\27\12\0\3\62\1\0"+
    "\1\62\104\0\1\65\111\0\1\245\1\0\1\212\102\0"+
    "\2\246\2\0\1\246\62\0\1\247\55\0\1\250\76\0"+
    "\1\251\55\0\1\252\31\0\1\251\56\0\1\253\5\0"+
    "\1\116\113\0\1\254\176\0\1\255\16\0\1\245\1\0"+
    "\1\212\66\0\1\256\21\0\1\257\1\260\1\261\1\0"+
    "\1\262\1\257\1\263\1\257\1\264\1\265\1\0\1\266"+
    "\1\267\10\0\1\267\1\264\1\265\14\0\1\263\2\0"+
    "\1\267\5\0\1\262\32\0\2\123\1\270\2\0\1\123"+
    "\1\0\1\123\1\264\1\265\1\0\1\266\1\267\10\0"+
    "\1\267\1\264\1\265\17\0\1\267\52\0\1\271\53\0"+
    "\1\272\21\0\2\273\3\0\1\273\1\0\1\273\100\0"+
    "\12\27\2\0\2\27\1\213\3\27\1\0\1\27\1\274"+
    "\3\27\4\0\22\27\11\0\1\27\20\0\12\27\2\0"+
    "\2\27\1\213\3\27\1\0\1\27\1\275\3\27\4\0"+
    "\22\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\3\27\1\276\1\27\4\0\16\27\1\277"+
    "\3\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\5\27\4\0\14\27\1\300\5\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\3\27\1\0"+
    "\5\27\4\0\6\27\1\301\13\27\11\0\1\27\20\0"+
    "\12\27\2\0\2\27\1\213\3\27\1\0\5\27\4\0"+
    "\15\27\1\302\4\27\11\0\1\27\20\0\12\27\2\0"+
    "\2\27\1\213\3\27\1\0\5\27\4\0\16\27\1\303"+
    "\3\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\3\27\1\304\1\27\4\0\1\27\1\305"+
    "\20\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\4\27\1\243\4\0\22\27\11\0\1\27"+
    "\101\0\1\306\4\0\1\307\103\0\1\310\3\0\1\311"+
    "\104\0\1\312\2\0\1\313\107\0\1\314\107\0\1\315"+
    "\107\0\1\316\2\0\1\317\104\0\1\320\107\0\1\321"+
    "\4\0\1\322\102\0\1\323\37\0\1\324\55\0\1\325"+
    "\31\0\1\324\56\0\1\326\7\0\1\327\112\0\12\27"+
    "\2\0\2\27\1\213\3\27\1\0\4\27\1\330\4\0"+
    "\22\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\4\27\1\331\4\0\22\27\11\0\1\27"+
    "\20\0\12\27\2\0\2\27\1\213\3\27\1\0\5\27"+
    "\4\0\12\27\1\332\7\27\11\0\1\27\20\0\12\27"+
    "\2\0\2\27\1\213\3\27\1\0\5\27\4\0\15\27"+
    "\1\333\4\27\11\0\1\27\20\0\12\27\2\0\2\27"+
    "\1\213\3\27\1\0\5\27\4\0\21\27\1\334\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\1\225\2\27"+
    "\1\0\5\27\4\0\6\27\1\335\13\27\11\0\1\27"+
    "\20\0\12\27\2\0\2\27\1\213\3\27\1\0\4\27"+
    "\1\336\4\0\22\27\11\0\1\27\20\0\12\27\2\0"+
    "\2\27\1\213\3\27\1\0\1\27\1\337\3\27\4\0"+
    "\22\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\5\27\4\0\7\27\1\340\12\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\3\27\1\0"+
    "\5\27\4\0\5\27\1\341\14\27\11\0\1\27\13\0"+
    "\1\210\111\0\1\342\125\0\1\343\74\0\2\344\1\0"+
    "\1\344\1\0\3\344\1\0\1\344\2\0\1\344\10\0"+
    "\1\344\1\0\1\344\5\0\2\344\5\0\1\344\2\0"+
    "\1\344\32\0\3\345\1\0\1\345\1\0\12\217\1\0"+
    "\1\346\2\217\1\220\3\217\1\0\5\217\2\0\1\347"+
    "\1\0\22\217\11\0\1\217\37\0\1\350\62\0\3\345"+
    "\1\0\1\345\1\0\12\217\1\0\1\346\2\217\1\220"+
    "\3\217\1\0\5\217\2\0\1\347\1\0\14\217\1\351"+
    "\5\217\11\0\1\217\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\2\27\1\352\2\27\4\0\22\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\1\353\2\27"+
    "\1\0\5\27\4\0\22\27\11\0\1\27\20\0\12\27"+
    "\2\0\2\27\1\213\3\27\1\0\5\27\4\0\7\27"+
    "\1\354\12\27\11\0\1\27\20\0\12\27\2\0\2\27"+
    "\1\213\3\27\1\0\5\27\4\0\10\27\1\355\11\27"+
    "\11\0\1\27\20\0\12\27\2\0\2\27\1\213\3\27"+
    "\1\0\5\27\4\0\2\27\1\356\17\27\11\0\1\27"+
    "\20\0\12\27\2\0\2\27\1\213\3\27\1\0\1\27"+
    "\1\357\3\27\4\0\5\27\1\360\14\27\11\0\1\27"+
    "\20\0\12\27\2\0\2\27\1\213\3\27\1\0\5\27"+
    "\4\0\12\27\1\361\7\27\11\0\1\27\20\0\12\27"+
    "\2\0\2\27\1\213\3\27\1\0\5\27\4\0\1\27"+
    "\1\362\20\27\11\0\1\27\20\0\12\27\2\0\2\27"+
    "\1\213\3\27\1\0\5\27\4\0\1\363\21\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\3\27\1\0"+
    "\5\27\4\0\7\27\1\364\12\27\11\0\1\27\20\0"+
    "\12\27\2\0\2\27\1\213\3\27\1\0\5\27\4\0"+
    "\1\27\1\365\20\27\11\0\1\27\20\0\12\27\2\0"+
    "\2\27\1\213\3\27\1\0\5\27\4\0\6\27\1\366"+
    "\13\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\3\27\1\367\1\27\4\0\22\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\3\27\1\0"+
    "\5\27\4\0\1\370\21\27\11\0\1\27\20\0\12\27"+
    "\2\0\2\27\1\213\3\27\1\0\5\27\4\0\1\27"+
    "\1\371\4\27\1\372\13\27\11\0\1\27\20\0\12\27"+
    "\2\0\2\27\1\213\3\27\1\0\5\27\4\0\14\27"+
    "\1\373\5\27\11\0\1\27\20\0\12\27\2\0\2\27"+
    "\1\213\3\27\1\0\5\27\4\0\14\27\1\374\5\27"+
    "\11\0\1\27\20\0\12\27\2\0\2\27\1\213\3\27"+
    "\1\0\5\27\4\0\20\27\1\375\1\27\11\0\1\27"+
    "\20\0\12\27\2\0\2\27\1\213\3\27\1\0\5\27"+
    "\4\0\7\27\1\376\12\27\11\0\1\27\15\0\1\377"+
    "\166\0\1\u0100\33\0\1\257\1\260\1\261\2\0\1\257"+
    "\1\0\1\257\1\264\1\265\1\0\1\266\1\267\10\0"+
    "\1\267\1\264\1\265\17\0\1\267\40\0\2\260\1\u0101"+
    "\2\0\1\260\1\0\1\260\1\0\1\265\1\0\1\266"+
    "\1\267\10\0\1\267\1\0\1\265\17\0\1\267\40\0"+
    "\1\257\1\260\1\261\2\0\1\257\1\0\1\257\100\0"+
    "\2\u0102\1\0\1\u0102\1\0\3\u0102\1\0\1\u0102\1\0"+
    "\1\u0103\1\u0102\10\0\1\u0102\1\0\1\u0102\5\0\2\u0102"+
    "\5\0\1\u0102\2\0\1\u0102\40\0\1\u0104\6\0\1\u0104"+
    "\100\0\1\u0105\1\u0106\3\0\1\u0106\1\0\1\u0106\2\0"+
    "\1\u0107\56\0\1\u0107\16\0\2\123\1\270\2\0\1\123"+
    "\1\0\1\123\100\0\2\273\1\u0108\2\0\1\273\1\0"+
    "\1\273\1\0\1\265\2\0\1\267\10\0\1\267\1\0"+
    "\1\265\17\0\1\267\40\0\12\27\2\0\2\27\1\213"+
    "\1\u0109\2\27\1\0\5\27\4\0\22\27\11\0\1\27"+
    "\20\0\12\27\2\0\2\27\1\213\3\27\1\0\5\27"+
    "\4\0\14\27\1\u010a\5\27\11\0\1\27\20\0\12\27"+
    "\2\0\2\27\1\213\3\27\1\0\5\27\4\0\1\27"+
    "\1\u010b\20\27\11\0\1\27\20\0\12\27\2\0\2\27"+
    "\1\213\3\27\1\0\5\27\4\0\1\27\1\u010c\20\27"+
    "\11\0\1\27\20\0\12\27\2\0\2\27\1\213\3\27"+
    "\1\0\5\27\4\0\7\27\1\u010d\12\27\11\0\1\27"+
    "\20\0\12\27\2\0\2\27\1\213\1\u010e\2\27\1\0"+
    "\5\27\4\0\22\27\11\0\1\27\20\0\12\27\2\0"+
    "\2\27\1\213\3\27\1\0\5\27\4\0\7\27\1\u010f"+
    "\12\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\1\27\1\u0110\3\27\4\0\22\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\3\27\1\0"+
    "\1\27\1\u0111\3\27\4\0\22\27\11\0\1\27\20\0"+
    "\12\27\2\0\2\27\1\213\3\27\1\0\3\27\1\u0112"+
    "\1\27\4\0\22\27\11\0\1\27\106\0\1\u0113\103\0"+
    "\1\u0114\3\0\1\u0115\16\0\1\u0116\112\0\12\27\2\0"+
    "\2\27\1\213\3\27\1\0\5\27\4\0\13\27\1\u0117"+
    "\6\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\5\27\4\0\13\27\1\u0118\6\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\3\27\1\0"+
    "\4\27\1\u0119\4\0\22\27\11\0\1\27\20\0\12\27"+
    "\2\0\2\27\1\213\3\27\1\0\5\27\4\0\14\27"+
    "\1\u011a\5\27\11\0\1\27\20\0\12\27\2\0\2\27"+
    "\1\213\3\27\1\0\5\27\4\0\1\u011b\21\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\3\27\1\0"+
    "\1\27\1\u011c\3\27\4\0\22\27\11\0\1\27\20\0"+
    "\12\27\2\0\2\27\1\213\3\27\1\0\5\27\4\0"+
    "\22\27\11\0\1\u011d\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\5\27\4\0\1\27\1\371\20\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\3\27\1\0"+
    "\5\27\4\0\7\27\1\u011e\12\27\11\0\1\27\11\0"+
    "\4\u0116\1\u011f\1\u0116\1\u0120\101\u0116\7\0\2\u0121\1\0"+
    "\1\u0121\1\0\3\u0121\1\0\1\u0121\2\0\1\u0121\10\0"+
    "\1\u0121\1\0\1\u0121\5\0\2\u0121\5\0\1\u0121\2\0"+
    "\1\u0121\32\0\3\345\1\0\1\345\33\0\1\347\57\0"+
    "\3\217\1\0\1\217\1\0\2\217\2\0\2\217\1\220"+
    "\2\217\2\0\5\217\4\0\22\217\11\0\1\217\20\0"+
    "\2\u0122\1\0\1\u0122\1\0\3\u0122\1\0\1\u0122\2\0"+
    "\1\u0122\10\0\1\u0122\1\0\1\u0122\5\0\2\u0122\5\0"+
    "\1\u0122\2\0\1\u0122\32\0\3\345\1\0\1\345\1\0"+
    "\12\217\1\0\1\346\2\217\1\220\3\217\1\0\5\217"+
    "\2\0\1\347\1\0\7\217\1\u0123\12\217\11\0\1\217"+
    "\20\0\12\27\2\0\2\27\1\213\1\u0124\2\27\1\0"+
    "\5\27\4\0\22\27\11\0\1\27\20\0\12\27\2\0"+
    "\2\27\1\213\3\27\1\0\1\u0125\4\27\4\0\22\27"+
    "\11\0\1\27\20\0\12\27\2\0\2\27\1\213\3\27"+
    "\1\0\4\27\1\u0126\4\0\22\27\11\0\1\27\20\0"+
    "\12\27\2\0\2\27\1\213\3\27\1\0\3\27\1\u0127"+
    "\1\27\4\0\22\27\11\0\1\27\20\0\12\27\2\0"+
    "\2\27\1\213\3\27\1\0\5\27\4\0\3\27\1\u0128"+
    "\16\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\5\27\4\0\7\27\1\u0129\12\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\3\27\1\0"+
    "\5\27\4\0\11\27\1\u012a\10\27\11\0\1\27\20\0"+
    "\12\27\2\0\2\27\1\213\3\27\1\0\5\27\4\0"+
    "\7\27\1\u012b\12\27\11\0\1\27\20\0\12\27\2\0"+
    "\2\27\1\213\3\27\1\0\5\27\4\0\12\27\1\u012c"+
    "\7\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\1\27\1\u012d\1\27\1\u012e\1\27\4\0"+
    "\22\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\4\27\1\u012f\4\0\22\27\11\0\1\27"+
    "\20\0\12\27\2\0\2\27\1\213\3\27\1\0\5\27"+
    "\4\0\14\27\1\u0130\5\27\11\0\1\27\20\0\12\27"+
    "\2\0\2\27\1\213\3\27\1\0\1\27\1\u0131\3\27"+
    "\4\0\22\27\11\0\1\27\20\0\12\27\2\0\2\27"+
    "\1\213\3\27\1\0\5\27\4\0\1\27\1\u0132\20\27"+
    "\11\0\1\27\20\0\12\27\2\0\2\27\1\213\3\27"+
    "\1\0\4\27\1\u0133\4\0\22\27\11\0\1\27\20\0"+
    "\12\27\2\0\2\27\1\213\3\27\1\0\5\27\4\0"+
    "\7\27\1\u0134\12\27\11\0\1\27\20\0\12\27\2\0"+
    "\2\27\1\213\3\27\1\0\5\27\4\0\5\27\1\u0135"+
    "\14\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\5\27\4\0\2\27\1\u0136\17\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\3\27\1\0"+
    "\5\27\4\0\1\27\1\u0137\20\27\11\0\1\27\20\0"+
    "\12\27\2\0\2\27\1\213\3\27\1\0\5\27\4\0"+
    "\5\27\1\u0138\14\27\11\0\1\27\17\0\1\u0139\110\0"+
    "\2\260\1\u0101\2\0\1\260\1\0\1\260\100\0\2\u0102"+
    "\1\u013a\1\u0102\1\0\3\u0102\1\264\1\u0102\1\0\1\u013b"+
    "\1\u0102\1\u013c\7\0\1\u0102\1\264\1\u0102\4\0\1\u013c"+
    "\2\u0102\5\0\1\u0102\2\0\1\u0102\40\0\2\u013d\1\0"+
    "\1\u013d\1\0\3\u013d\1\0\1\u013d\2\0\1\u013d\10\0"+
    "\1\u013d\1\0\1\u013d\5\0\2\u013d\5\0\1\u013d\2\0"+
    "\1\u013d\40\0\1\u0104\1\0\1\u013e\4\0\1\u0104\1\264"+
    "\15\0\1\264\75\0\1\267\10\0\1\267\21\0\1\267"+
    "\40\0\2\u0106\1\u013f\2\0\1\u0106\1\0\1\u0106\4\0"+
    "\1\267\10\0\1\267\21\0\1\267\40\0\1\u0105\1\u0106"+
    "\3\0\1\u0106\1\0\1\u0106\100\0\2\273\1\u0108\2\0"+
    "\1\273\1\0\1\273\100\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\5\27\4\0\10\27\1\u0140\11\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\3\27\1\0"+
    "\5\27\4\0\4\27\1\u0141\15\27\11\0\1\27\20\0"+
    "\12\27\2\0\2\27\1\213\3\27\1\0\5\27\4\0"+
    "\12\27\1\u0142\7\27\11\0\1\27\20\0\12\27\2\0"+
    "\2\27\1\213\3\27\1\0\5\27\4\0\6\27\1\u0143"+
    "\13\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\4\27\1\u0144\4\0\22\27\11\0\1\27"+
    "\20\0\12\27\2\0\2\27\1\213\3\27\1\0\4\27"+
    "\1\u0145\4\0\22\27\11\0\1\27\20\0\12\27\2\0"+
    "\2\27\1\213\3\27\1\0\5\27\4\0\6\27\1\u0146"+
    "\13\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\5\27\4\0\1\27\1\u0147\20\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\3\27\1\0"+
    "\5\27\4\0\12\27\1\u010e\7\27\11\0\1\27\106\0"+
    "\1\u0148\12\0\4\u0116\1\u011f\103\u0116\7\0\12\27\2\0"+
    "\2\27\1\213\3\27\1\0\5\27\4\0\1\27\1\u0149"+
    "\20\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\5\27\4\0\1\27\1\u014a\20\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\3\27\1\0"+
    "\5\27\4\0\12\27\1\u014b\7\27\11\0\1\27\20\0"+
    "\12\27\2\0\2\27\1\213\3\27\1\0\5\27\4\0"+
    "\1\27\1\u014c\20\27\11\0\1\27\20\0\12\27\2\0"+
    "\2\27\1\213\3\27\1\0\1\27\1\u014d\3\27\4\0"+
    "\22\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\5\27\4\0\11\27\1\u014e\10\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\1\u014f\2\27"+
    "\1\0\5\27\4\0\22\27\11\0\1\27\20\0\12\27"+
    "\2\0\2\27\1\213\3\27\1\0\5\27\4\0\16\27"+
    "\1\u0150\3\27\11\0\1\27\11\0\4\u0116\1\u011f\1\u0116"+
    "\1\u0151\101\u0116\7\0\2\u0152\1\0\1\u0152\1\0\3\u0152"+
    "\1\0\1\u0152\2\0\1\u0152\10\0\1\u0152\1\0\1\u0152"+
    "\5\0\2\u0152\5\0\1\u0152\2\0\1\u0152\40\0\2\u0153"+
    "\1\0\1\u0153\1\0\3\u0153\1\0\1\u0153\2\0\1\u0153"+
    "\10\0\1\u0153\1\0\1\u0153\5\0\2\u0153\5\0\1\u0153"+
    "\2\0\1\u0153\32\0\3\345\1\0\1\345\1\0\12\217"+
    "\1\0\1\346\2\217\1\220\3\217\1\0\4\217\1\u0154"+
    "\2\0\1\347\1\0\22\217\11\0\1\217\20\0\12\27"+
    "\2\0\2\27\1\213\3\27\1\0\3\27\1\u0155\1\27"+
    "\4\0\22\27\11\0\1\27\20\0\12\27\2\0\2\27"+
    "\1\213\3\27\1\0\5\27\4\0\14\27\1\u0156\5\27"+
    "\11\0\1\27\20\0\12\27\2\0\2\27\1\213\3\27"+
    "\1\0\5\27\4\0\5\27\1\u0157\14\27\11\0\1\27"+
    "\20\0\12\27\2\0\2\27\1\213\3\27\1\0\5\27"+
    "\4\0\1\27\1\u0158\20\27\11\0\1\27\20\0\12\27"+
    "\2\0\2\27\1\213\3\27\1\0\4\27\1\u0159\4\0"+
    "\22\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\5\27\4\0\1\27\1\u015a\20\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\3\27\1\0"+
    "\5\27\4\0\6\27\1\u015b\13\27\11\0\1\27\20\0"+
    "\12\27\2\0\2\27\1\213\3\27\1\0\5\27\4\0"+
    "\12\27\1\u015c\7\27\11\0\1\27\20\0\12\27\2\0"+
    "\2\27\1\213\3\27\1\0\5\27\4\0\6\27\1\u015d"+
    "\13\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\4\27\1\u015e\4\0\22\27\11\0\1\27"+
    "\20\0\12\27\2\0\2\27\1\213\3\27\1\0\5\27"+
    "\4\0\6\27\1\u015f\13\27\11\0\1\27\20\0\12\27"+
    "\2\0\2\27\1\213\3\27\1\0\5\27\4\0\12\27"+
    "\1\u0160\7\27\11\0\1\27\20\0\12\27\2\0\2\27"+
    "\1\213\3\27\1\0\5\27\4\0\20\27\1\u0161\1\27"+
    "\11\0\1\27\20\0\12\27\2\0\2\27\1\213\3\27"+
    "\1\0\5\27\4\0\7\27\1\u0162\12\27\11\0\1\27"+
    "\20\0\12\27\2\0\2\27\1\213\3\27\1\0\5\27"+
    "\4\0\6\27\1\u0163\13\27\11\0\1\27\20\0\12\27"+
    "\2\0\2\27\1\213\3\27\1\0\5\27\4\0\5\27"+
    "\1\u0164\14\27\11\0\1\27\20\0\12\27\2\0\2\27"+
    "\1\213\3\27\1\0\5\27\4\0\2\27\1\u0165\17\27"+
    "\11\0\1\27\20\0\12\27\2\0\2\27\1\213\3\27"+
    "\1\0\5\27\4\0\16\27\1\u0166\3\27\11\0\1\27"+
    "\20\0\12\27\2\0\2\27\1\213\3\27\1\0\3\27"+
    "\1\u0167\1\27\4\0\22\27\11\0\1\27\20\0\12\27"+
    "\2\0\2\27\1\213\3\27\1\0\5\27\4\0\11\27"+
    "\1\u0168\10\27\11\0\1\27\20\0\2\u0102\1\u013a\1\u0102"+
    "\1\0\3\u0102\1\0\1\u0102\2\0\1\u0102\10\0\1\u0102"+
    "\1\0\1\u0102\5\0\2\u0102\5\0\1\u0102\2\0\1\u0102"+
    "\40\0\2\u013d\1\0\1\u013d\1\0\3\u013d\1\0\1\u013d"+
    "\2\0\1\u013d\1\u013c\7\0\1\u013d\1\0\1\u013d\4\0"+
    "\1\u013c\2\u013d\5\0\1\u013d\2\0\1\u013d\40\0\1\u0169"+
    "\1\u0106\3\0\1\u0106\1\0\1\u0106\2\0\1\u016a\56\0"+
    "\1\u016a\16\0\2\u013d\1\u016b\1\u013d\1\0\3\u013d\1\0"+
    "\1\u013d\2\0\1\u013d\1\u013c\7\0\1\u013d\1\0\1\u013d"+
    "\4\0\1\u013c\2\u013d\5\0\1\u013d\2\0\1\u013d\40\0"+
    "\1\u0104\1\0\1\u013e\4\0\1\u0104\100\0\2\u0106\1\u013f"+
    "\2\0\1\u0106\1\0\1\u0106\100\0\12\27\2\0\2\27"+
    "\1\213\3\27\1\0\3\27\1\u016c\1\27\4\0\22\27"+
    "\11\0\1\27\20\0\12\27\2\0\2\27\1\213\3\27"+
    "\1\0\5\27\4\0\12\27\1\u016d\7\27\11\0\1\27"+
    "\20\0\12\27\2\0\2\27\1\213\3\27\1\0\5\27"+
    "\4\0\7\27\1\u016e\12\27\11\0\1\27\20\0\12\27"+
    "\2\0\2\27\1\213\3\27\1\0\5\27\4\0\7\27"+
    "\1\u016f\12\27\11\0\1\27\20\0\12\27\2\0\2\27"+
    "\1\213\1\u0170\2\27\1\0\5\27\4\0\22\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\1\u0171\2\27"+
    "\1\0\5\27\4\0\22\27\11\0\1\27\20\0\12\27"+
    "\2\0\2\27\1\213\3\27\1\0\1\u0172\4\27\4\0"+
    "\22\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\5\27\4\0\6\27\1\u0173\13\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\3\27\1\0"+
    "\5\27\4\0\5\27\1\u0174\14\27\11\0\1\27\20\0"+
    "\12\27\2\0\2\27\1\213\3\27\1\0\5\27\4\0"+
    "\5\27\1\u0175\14\27\11\0\1\27\20\0\2\27\1\0"+
    "\1\27\1\0\3\27\1\0\1\27\2\0\1\27\10\0"+
    "\1\27\1\0\1\27\5\0\2\27\5\0\1\27\2\0"+
    "\1\27\40\0\2\u0176\1\0\1\u0176\1\0\3\u0176\1\0"+
    "\1\u0176\2\0\1\u0176\10\0\1\u0176\1\0\1\u0176\5\0"+
    "\2\u0176\5\0\1\u0176\2\0\1\u0176\32\0\3\345\1\0"+
    "\1\345\1\0\12\217\1\0\1\346\2\217\1\220\3\217"+
    "\1\0\5\217\2\0\1\347\1\0\6\217\1\u0177\13\217"+
    "\11\0\1\217\20\0\12\27\2\0\2\27\1\213\3\27"+
    "\1\0\4\27\1\u0178\4\0\22\27\11\0\1\27\20\0"+
    "\12\27\2\0\2\27\1\213\3\27\1\0\2\27\1\u0179"+
    "\2\27\4\0\22\27\11\0\1\27\20\0\12\27\2\0"+
    "\2\27\1\213\3\27\1\0\5\27\4\0\2\27\1\u017a"+
    "\17\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\5\27\4\0\4\27\1\u017b\15\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\3\27\1\0"+
    "\5\27\4\0\2\27\1\u017c\17\27\11\0\1\27\20\0"+
    "\12\27\2\0\2\27\1\213\3\27\1\0\5\27\4\0"+
    "\7\27\1\u017d\12\27\11\0\1\27\20\0\12\27\2\0"+
    "\2\27\1\213\3\27\1\0\5\27\4\0\1\27\1\u017e"+
    "\20\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\5\27\4\0\7\27\1\u017f\12\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\3\27\1\0"+
    "\1\u0180\4\27\4\0\22\27\11\0\1\27\20\0\12\27"+
    "\2\0\2\27\1\213\3\27\1\0\5\27\4\0\13\27"+
    "\1\u0181\6\27\11\0\1\27\20\0\12\27\2\0\2\27"+
    "\1\213\3\27\1\0\5\27\4\0\5\27\1\u0182\14\27"+
    "\11\0\1\27\20\0\12\27\2\0\2\27\1\213\3\27"+
    "\1\0\5\27\4\0\12\27\1\u0183\7\27\11\0\1\27"+
    "\20\0\12\27\2\0\2\27\1\213\3\27\1\0\5\27"+
    "\4\0\5\27\1\u0184\14\27\11\0\1\27\20\0\12\27"+
    "\2\0\2\27\1\213\3\27\1\0\5\27\4\0\2\27"+
    "\1\u0185\17\27\11\0\1\27\20\0\12\27\2\0\2\27"+
    "\1\213\3\27\1\0\5\27\4\0\7\27\1\u0186\12\27"+
    "\11\0\1\27\20\0\12\27\2\0\2\27\1\213\3\27"+
    "\1\0\5\27\4\0\6\27\1\u0187\13\27\11\0\1\27"+
    "\20\0\12\27\2\0\2\27\1\213\3\27\1\0\4\27"+
    "\1\u0188\4\0\22\27\11\0\1\27\20\0\1\u0169\1\u0106"+
    "\3\0\1\u0106\1\0\1\u0106\4\0\1\267\10\0\1\267"+
    "\21\0\1\267\40\0\1\u0169\1\u0106\3\0\1\u0106\1\0"+
    "\1\u0106\100\0\2\u013d\1\u016b\1\u013d\1\0\3\u013d\1\0"+
    "\1\u013d\2\0\1\u013d\10\0\1\u013d\1\0\1\u013d\5\0"+
    "\2\u013d\5\0\1\u013d\2\0\1\u013d\40\0\12\27\2\0"+
    "\2\27\1\213\3\27\1\0\4\27\1\u0189\4\0\22\27"+
    "\11\0\1\27\20\0\12\27\2\0\2\27\1\213\3\27"+
    "\1\0\3\27\1\u018a\1\27\4\0\22\27\11\0\1\27"+
    "\20\0\12\27\2\0\2\27\1\213\3\27\1\0\3\27"+
    "\1\u018b\1\27\4\0\22\27\11\0\1\27\20\0\12\27"+
    "\2\0\2\27\1\213\3\27\1\0\5\27\4\0\5\27"+
    "\1\u018c\14\27\11\0\1\27\20\0\12\27\2\0\2\27"+
    "\1\213\3\27\1\0\5\27\4\0\7\27\1\u018d\12\27"+
    "\11\0\1\27\20\0\12\27\2\0\2\27\1\213\3\27"+
    "\1\0\2\27\1\u018e\2\27\4\0\22\27\11\0\1\27"+
    "\20\0\12\27\2\0\2\27\1\213\3\27\1\0\5\27"+
    "\4\0\6\27\1\u018f\13\27\11\0\1\27\20\0\2\217"+
    "\1\0\1\217\1\0\3\217\1\0\1\217\2\0\1\217"+
    "\10\0\1\217\1\0\1\217\5\0\2\217\5\0\1\217"+
    "\2\0\1\217\32\0\3\345\1\0\1\345\1\0\12\217"+
    "\1\0\1\346\2\217\1\220\3\217\1\0\5\217\2\0"+
    "\1\347\1\0\13\217\1\u0190\6\217\11\0\1\217\20\0"+
    "\12\27\2\0\2\27\1\213\3\27\1\0\5\27\4\0"+
    "\12\27\1\u0191\7\27\11\0\1\27\20\0\12\27\2\0"+
    "\2\27\1\213\3\27\1\0\4\27\1\u0192\4\0\22\27"+
    "\11\0\1\27\20\0\12\27\2\0\2\27\1\213\3\27"+
    "\1\0\5\27\4\0\7\27\1\u0193\12\27\11\0\1\27"+
    "\20\0\12\27\2\0\2\27\1\213\3\27\1\0\4\27"+
    "\1\u0194\4\0\22\27\11\0\1\27\20\0\12\27\2\0"+
    "\2\27\1\213\3\27\1\0\5\27\4\0\2\27\1\u0195"+
    "\17\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\4\27\1\u0196\4\0\22\27\11\0\1\27"+
    "\20\0\12\27\2\0\2\27\1\213\3\27\1\0\5\27"+
    "\4\0\1\27\1\u0197\20\27\11\0\1\27\20\0\12\27"+
    "\2\0\2\27\1\213\3\27\1\0\4\27\1\u0198\4\0"+
    "\22\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\3\27\1\u0199\1\27\4\0\22\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\3\27\1\0"+
    "\5\27\4\0\13\27\1\u019a\6\27\11\0\1\27\20\0"+
    "\12\27\2\0\2\27\1\213\3\27\1\0\1\27\1\u019b"+
    "\3\27\4\0\22\27\11\0\1\27\20\0\12\27\2\0"+
    "\2\27\1\213\3\27\1\0\5\27\4\0\7\27\1\u019c"+
    "\12\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\5\27\4\0\7\27\1\u019d\12\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\3\27\1\0"+
    "\5\27\4\0\2\27\1\u019e\17\27\11\0\1\27\20\0"+
    "\12\27\2\0\2\27\1\213\3\27\1\0\5\27\4\0"+
    "\12\27\1\u019f\7\27\11\0\1\27\20\0\12\27\2\0"+
    "\2\27\1\213\3\27\1\0\4\27\1\u01a0\4\0\22\27"+
    "\11\0\1\27\20\0\12\27\2\0\2\27\1\213\3\27"+
    "\1\0\4\27\1\u01a1\4\0\22\27\11\0\1\27\12\0"+
    "\3\345\1\0\1\345\1\0\12\217\1\0\1\346\2\217"+
    "\1\220\3\217\1\0\5\217\2\0\1\347\1\0\1\217"+
    "\1\u01a2\20\217\11\0\1\217\20\0\12\27\2\0\2\27"+
    "\1\213\3\27\1\0\4\27\1\u01a3\4\0\22\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\3\27\1\0"+
    "\5\27\4\0\7\27\1\u01a4\12\27\11\0\1\27\20\0"+
    "\12\27\2\0\2\27\1\213\3\27\1\0\5\27\4\0"+
    "\14\27\1\u01a5\5\27\11\0\1\27\20\0\12\27\2\0"+
    "\2\27\1\213\3\27\1\0\5\27\4\0\2\27\1\u01a6"+
    "\17\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\5\27\4\0\14\27\1\u01a7\5\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\3\27\1\0"+
    "\4\27\1\u01a8\4\0\22\27\11\0\1\27\20\0\12\27"+
    "\2\0\2\27\1\213\3\27\1\0\5\27\4\0\1\u01a9"+
    "\21\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\5\27\4\0\14\27\1\u01aa\5\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\3\27\1\0"+
    "\5\27\4\0\12\27\1\u01ab\7\27\11\0\1\27\20\0"+
    "\12\27\2\0\2\27\1\213\3\27\1\0\5\27\4\0"+
    "\12\27\1\u01ac\7\27\11\0\1\27\12\0\3\345\1\0"+
    "\1\345\1\0\12\217\1\0\1\346\2\217\1\220\3\217"+
    "\1\0\5\217\2\0\1\347\1\0\2\217\1\u01ad\17\217"+
    "\11\0\1\217\20\0\12\27\2\0\2\27\1\213\3\27"+
    "\1\0\2\27\1\u01ae\2\27\4\0\22\27\11\0\1\27"+
    "\20\0\12\27\2\0\2\27\1\213\3\27\1\0\5\27"+
    "\4\0\7\27\1\u01af\12\27\11\0\1\27\20\0\12\27"+
    "\2\0\2\27\1\213\3\27\1\0\4\27\1\u01b0\4\0"+
    "\22\27\11\0\1\27\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\5\27\4\0\7\27\1\u01b1\12\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\3\27\1\0"+
    "\5\27\4\0\5\27\1\u01b2\14\27\11\0\1\27\12\0"+
    "\3\345\1\0\1\345\1\0\12\217\1\0\1\346\2\217"+
    "\1\220\3\217\1\0\4\217\1\u01b3\2\0\1\347\1\0"+
    "\22\217\11\0\1\217\20\0\12\27\2\0\2\27\1\213"+
    "\3\27\1\0\5\27\4\0\12\27\1\u01b4\7\27\11\0"+
    "\1\27\20\0\12\27\2\0\2\27\1\213\3\27\1\0"+
    "\5\27\4\0\17\27\1\u01b5\2\27\11\0\1\27\20\0"+
    "\12\27\2\0\2\27\1\213\3\27\1\0\4\27\1\u01b6"+
    "\4\0\22\27\11\0\1\27\20\0\12\27\2\0\2\27"+
    "\1\213\3\27\1\0\2\27\1\u01b7\2\27\4\0\22\27"+
    "\11\0\1\27\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21960];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\22\0\1\11\1\1\1\11\7\1\4\11\11\1\10\11"+
    "\1\1\3\11\2\1\2\11\1\1\2\11\1\1\4\11"+
    "\1\1\6\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\7\1\1\11\2\1\2\11\7\1\1\11\3\1\1\11"+
    "\5\1\3\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\2\11\2\1\3\11\3\1\1\11\5\1\1\11"+
    "\1\1\1\11\1\1\1\11\7\0\24\1\1\0\1\11"+
    "\1\0\6\11\2\1\3\0\1\11\2\0\1\11\1\0"+
    "\2\11\14\1\1\11\1\1\16\11\1\0\12\1\1\0"+
    "\1\11\3\0\1\11\2\0\25\1\1\0\1\11\1\0"+
    "\1\1\1\0\3\1\2\0\12\1\1\11\1\1\1\11"+
    "\1\0\10\1\1\0\1\1\3\0\25\1\1\11\6\0"+
    "\10\1\1\11\10\1\1\11\3\0\25\1\2\0\12\1"+
    "\2\0\30\1\1\0\21\1\1\0\12\1\1\0\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[439];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private java.io.Writer writer;
	private List<CommentHandler> commentHandlers = new ArrayList<CommentHandler>();

    private int classDepth = 0;
    private int parenDepth = 0;
    private int nestingDepth = 0;
    private int annotationDepth = 0;
    private int assignmentDepth = 0;
    private int stateDepth = 0;
    private int codeblockDepth = 0;
    private int[] stateStack = new int[10];
    private int braceMode = CODEBLOCK;
    private int parenMode = -1;
    private StringBuffer codeBody = new StringBuffer(8192);
    private boolean newMode;
    private boolean bracketMode;
    private boolean anonymousMode;
    private boolean enumConstantMode;
    private boolean appendingToCodeBody;

	private void write() {
		write( text() );
	}
 
	private void write( String text ) {
    	try {
            if( writer != null ) {
                writer.write( text );
            }
        }
        catch( java.io.IOException ioe ) {}
	}

    public String text() {
        return yytext();
    }

    public int lex() throws java.io.IOException {
//    	write();
        return yylex();
    }
    
    public int getLine() {
        return yyline + 1;
    }

    public int getColumn() {
        return yycolumn + 1;
    }

    private void pushState(int newState) {
        stateStack[stateDepth++] = zzLexicalState;
        yybegin(newState);
    }

    private void popState() {
        yybegin(stateStack[--stateDepth]);
    }
    
    public String getCodeBody(){
        String s = codeBody.toString();
        codeBody = new StringBuffer(8192);
        return s;
    }
    
    public void addCommentHandler(CommentHandler handler) {
      this.commentHandlers.add(handler);
    }
    
    private int parseValue( String value, int defaultValue )
    {
      int result;
      try 
      {
        result = Integer.parseInt( value );
      }
      catch( NumberFormatException e )
      {
        result = defaultValue;
      }
      return result;
    }
    
    public JFlexLexer( java.io.Reader reader, java.io.Writer writer ) {
       this( reader );
       this.writer = writer;
  	}

    public JFlexLexer( java.io.InputStream stream, java.io.Writer writer ) {
       this( stream );
       this.writer = writer;
  	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JFlexLexer(java.io.Reader in) {
    java.io.InputStream qdoxProperties = this.getClass().getClassLoader().getResourceAsStream( "qdox.properties" );
  if( qdoxProperties != null )
  {
     Properties props = new Properties();
     try
     {
         props.load( qdoxProperties );
         stateStack = new int[ parseValue( props.getProperty( "lexer.statestack.size" ), stateStack.length ) ];
     }
     catch ( java.io.IOException e )
     {
         // failed to load qdoxProperties
     }
     finally 
     {
        try
        {
          qdoxProperties.close();
        }
        catch( java.io.IOException e )
        {
          // noop, we did our best
        }
     }
  }
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2280) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 138: 
          { return Parser.REQUIRES;
          }
        case 145: break;
        case 100: 
          { return Parser.INT;
          }
        case 146: break;
        case 48: 
          { return Parser.PERCENT;
          }
        case 147: break;
        case 41: 
          { return Parser.MINUS;
          }
        case 148: break;
        case 107: 
          { return Parser.CHAR;
          }
        case 149: break;
        case 123: 
          { return Parser.THROWS;
          }
        case 150: break;
        case 75: 
          { return Parser.FLOAT_LITERAL;
          }
        case 151: break;
        case 134: 
          { return Parser.ABSTRACT;
          }
        case 152: break;
        case 99: 
          { codeBody.append("new");
        if (nestingDepth==assignmentDepth) {
            newMode=true;
        }
          }
        case 153: break;
        case 9: 
          { return Parser.COMMA;
          }
        case 154: break;
        case 97: 
          { parenMode = ANNOTATION;
        yypushback(text().length()-1);
        getCodeBody(); /* reset codebody */
        pushState(NAME);
        return Parser.AT;
          }
        case 155: break;
        case 3: 
          { return Parser.IDENTIFIER;
          }
        case 156: break;
        case 125: 
          { return Parser.NATIVE;
          }
        case 157: break;
        case 32: 
          { codeBody.append(')');
        nestingDepth--; 
        if (nestingDepth < assignmentDepth) {
            appendingToCodeBody = true; 
            popState(); 
            return Parser.PARENCLOSE; 
        }
          }
        case 158: break;
        case 23: 
          { if (--codeblockDepth == 0) {
            popState();
            appendingToCodeBody = false;
            braceMode = CODEBLOCK;
            return Parser.CODEBLOCK;
        } else {
            codeBody.append('}');
        }
          }
        case 159: break;
        case 104: 
          { if (appendingToCodeBody) { codeBody.append("/**/"); }
          }
        case 160: break;
        case 93: 
          { codeBody.append("\\\"");
          }
        case 161: break;
        case 27: 
          { codeBody.append('{');
		anonymousMode = true;
		nestingDepth++;
          }
        case 162: break;
        case 2: 
          { return Parser.STAR;
          }
        case 163: break;
        case 46: 
          { nestingDepth--; return Parser.BRACECLOSE;
          }
        case 164: break;
        case 67: 
          { if (appendingToCodeBody) { codeBody.append("//"); } pushState(SINGLELINECOMMENT);
          }
        case 165: break;
        case 19: 
          { if (appendingToCodeBody) { codeBody.append('"');  } pushState(STRING);
          }
        case 166: break;
        case 72: 
          { if (appendingToCodeBody) { codeBody.append("*/"); } popState();
          }
        case 167: break;
        case 37: 
          { if (appendingToCodeBody) { codeBody.append('\'');    } popState();
          }
        case 168: break;
        case 101: 
          { return Parser.LESSTHAN2EQUALS;
          }
        case 169: break;
        case 90: 
          { return Parser.VERTLINE2;
          }
        case 170: break;
        case 132: 
          { return Parser.DYNAMIC;
          }
        case 171: break;
        case 56: 
          { return Parser.TILDE;
          }
        case 172: break;
        case 73: 
          { return Parser.STAREQUALS;
          }
        case 173: break;
        case 96: 
          { return Parser.DOTDOTDOT;
          }
        case 174: break;
        case 38: 
          { if (appendingToCodeBody) { codeBody.append(yytext()); } popState();
          }
        case 175: break;
        case 25: 
          { nestingDepth--;
		if (appendingToCodeBody) { codeBody.append(")"); }
        if (nestingDepth == parenDepth) {
            popState();
        }
          }
        case 176: break;
        case 111: 
          { return Parser.USES;
          }
        case 177: break;
        case 126: 
          { return Parser.DOUBLE;
          }
        case 178: break;
        case 68: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { codeBody.append('.');
      newMode = true;
          }
        case 179: break;
        case 50: 
          { return Parser.CIRCUMFLEX;
          }
        case 180: break;
        case 71: 
          { if (appendingToCodeBody) { codeBody.append("\\'");  }
          }
        case 181: break;
        case 7: 
          { if(braceMode >= 0) {
          if(braceMode == ENUM) {
            enumConstantMode = true;
          } else if (braceMode == CODEBLOCK) {
              getCodeBody(); /* reset codebody */
              appendingToCodeBody = true;
          }
          pushState(braceMode);
          braceMode = -1;
          yypushback(1); /* (re)enter brace in right mode */
        }
        else {
          nestingDepth++;
          if (enumConstantMode && yystate() == ENUM)
          {
            braceMode = TYPE;
          }
          else 
          {
            braceMode = CODEBLOCK;
          }
          return Parser.BRACEOPEN;
        }
          }
        case 182: break;
        case 42: 
          { return Parser.AT;
          }
        case 183: break;
        case 15: 
          { return Parser.AMPERSAND;
          }
        case 184: break;
        case 1: 
          { if (appendingToCodeBody) { codeBody.append(yytext()); }
          }
        case 185: break;
        case 69: 
          { if (appendingToCodeBody) { codeBody.append("\\\\"); }
          }
        case 186: break;
        case 106: 
          { return Parser.LONG;
          }
        case 187: break;
        case 133: 
          { return Parser.EXPORTS;
          }
        case 188: break;
        case 31: 
          { codeBody.append(']'); bracketMode = false; nestingDepth--;
          }
        case 189: break;
        case 26: 
          { if (nestingDepth == assignmentDepth) {
            appendingToCodeBody = true;
            newMode = false;
            popState(); 
            return Parser.SEMI; 
        } else {
            codeBody.append(';');
        }
          }
        case 190: break;
        case 122: 
          { pushState(NAME);
                          return Parser.IMPORT;
          }
        case 191: break;
        case 79: 
          { return Parser.LESSEQUALS;
          }
        case 192: break;
        case 142: 
          { classDepth++;
        braceMode = ANNOTATIONTYPE;
        return Parser.ANNOINTERFACE;
          }
        case 193: break;
        case 5: 
          { pushState(ANNOTATION_NOARG);
        return Parser.AT;
          }
        case 194: break;
        case 34: 
          { codeBody.append('>');
        if (!anonymousMode) {
	        if (!bracketMode && newMode) {
    	        nestingDepth--;
    	    	if (nestingDepth==assignmentDepth) { 
    	            newMode=false;
    	        }
        	}
        }
          }
        case 195: break;
        case 64: 
          { popState(); 
                          return Parser.BRACECLOSE;
          }
        case 196: break;
        case 70: 
          { if (appendingToCodeBody) { codeBody.append("\\\""); }
          }
        case 197: break;
        case 130: 
          { assignmentDepth = nestingDepth; appendingToCodeBody = true; pushState(ASSIGNMENT);
          }
        case 198: break;
        case 102: 
          { return Parser.GREATERTHAN3;
          }
        case 199: break;
        case 63: 
          { return Parser.BRACEOPEN;
          }
        case 200: break;
        case 129: 
          { return Parser.PRIVATE;
          }
        case 201: break;
        case 109: 
          { return Parser.BYTE;
          }
        case 202: break;
        case 10: 
          { nestingDepth++; return Parser.SQUAREOPEN;
          }
        case 203: break;
        case 131: 
          { return Parser.DEFAULT;
          }
        case 204: break;
        case 78: 
          { return Parser.LESSTHAN2;
          }
        case 205: break;
        case 47: 
          { return Parser.EQUALS;
          }
        case 206: break;
        case 45: 
          { if( nestingDepth-- == annotationDepth) { popState(); } return Parser.PARENCLOSE;
          }
        case 207: break;
        case 91: 
          { return Parser.NOTEQUALS;
          }
        case 208: break;
        case 124: 
          { return Parser.STATIC;
          }
        case 209: break;
        case 4: 
          { return Parser.DOT;
          }
        case 210: break;
        case 127: 
          { return Parser.EXTENDS;
          }
        case 211: break;
        case 87: 
          { return Parser.PLUSPLUS;
          }
        case 212: break;
        case 12: 
          { nestingDepth--; return Parser.PARENCLOSE;
          }
        case 213: break;
        case 98: 
          { return Parser.NEW;
          }
        case 214: break;
        case 18: 
          { assignmentDepth = nestingDepth;
        getCodeBody(); /* reset codebody */
        appendingToCodeBody = true;
        pushState(ASSIGNMENT);
          }
        case 215: break;
        case 80: 
          { return Parser.GREATERTHAN2;
          }
        case 216: break;
        case 22: 
          { if(codeblockDepth++ > 0 ) {
            codeBody.append('{');
            }
          }
        case 217: break;
        case 33: 
          { codeBody.append('<');
        if (!bracketMode && newMode && !anonymousMode) {
            nestingDepth++; 
        }
          }
        case 218: break;
        case 59: 
          { popState();
         return Parser.SEMI;
          }
        case 219: break;
        case 6: 
          { return Parser.SEMI;
          }
        case 220: break;
        case 82: 
          { return Parser.AMPERSAND2;
          }
        case 221: break;
        case 144: 
          { return Parser.SYNCHRONIZED;
          }
        case 222: break;
        case 84: 
          { return Parser.EQUALS2;
          }
        case 223: break;
        case 118: 
          { return Parser.SHORT;
          }
        case 224: break;
        case 43: 
          { nestingDepth++; return Parser.BRACEOPEN;
          }
        case 225: break;
        case 62: 
          { nestingDepth++;
            if(parenMode >= 0) {
              annotationDepth = nestingDepth;
              pushState(parenMode);
              parenMode = -1;
              return Parser.PARENOPEN;
            }
            else if(enumConstantMode) 
            {  
              annotationDepth = nestingDepth;
              pushState(ARGUMENTS);
              return Parser.PARENOPEN;
            }
            else {
                return Parser.PARENOPEN;
            }
          }
        case 226: break;
        case 11: 
          { nestingDepth--; return Parser.SQUARECLOSE;
          }
        case 227: break;
        case 53: 
          { appendingToCodeBody=true; codeBody.append("\'"); pushState(ANNOCHAR);
          }
        case 228: break;
        case 108: 
          { return Parser.BOOLEAN_LITERAL;
          }
        case 229: break;
        case 81: 
          { return Parser.GREATEREQUALS;
          }
        case 230: break;
        case 77: 
          { return Parser.MINUSEQUALS;
          }
        case 231: break;
        case 137: 
          { return Parser.PROVIDES;
          }
        case 232: break;
        case 94: 
          { codeBody.append("\\'");
          }
        case 233: break;
        case 120: 
          { pushState(MODULE);
                          return Parser.MODULE;
          }
        case 234: break;
        case 89: 
          { return Parser.VERTLINEEQUALS;
          }
        case 235: break;
        case 136: 
          { return Parser.STRICTFP;
          }
        case 236: break;
        case 139: 
          { return Parser.PROTECTED;
          }
        case 237: break;
        case 88: 
          { return Parser.CIRCUMFLEXEQUALS;
          }
        case 238: break;
        case 13: 
          { return Parser.LESSTHAN;
          }
        case 239: break;
        case 57: 
          { codeBody.append("\""); popState(); appendingToCodeBody=false; return Parser.STRING_LITERAL;
          }
        case 240: break;
        case 52: 
          { appendingToCodeBody=true; codeBody.append("\""); pushState(ANNOSTRING);
          }
        case 241: break;
        case 21: 
          { codeBody.append(yytext());
          }
        case 242: break;
        case 92: 
          { codeBody.append("\\\\");
          }
        case 243: break;
        case 119: 
          { return Parser.FLOAT;
          }
        case 244: break;
        case 103: 
          { return Parser.GREATERTHAN2EQUALS;
          }
        case 245: break;
        case 24: 
          { nestingDepth++; 
        if (appendingToCodeBody) { codeBody.append("("); }
          }
        case 246: break;
        case 55: 
          { return Parser.EXCLAMATION;
          }
        case 247: break;
        case 121: 
          { return Parser.PUBLIC;
          }
        case 248: break;
        case 17: 
          { nestingDepth--;
        classDepth--;
        popState();
        if ( yystate() == ENUM && enumConstantMode)
        {
          braceMode = TYPE;
        }
        else
        {
          braceMode = CODEBLOCK;
        }
        return Parser.BRACECLOSE;
          }
        case 249: break;
        case 40: 
          { return Parser.INTEGER_LITERAL;
          }
        case 250: break;
        case 36: 
          { if (appendingToCodeBody) { codeBody.append('"');    } popState();
          }
        case 251: break;
        case 44: 
          { ++ nestingDepth; return Parser.PARENOPEN;
          }
        case 252: break;
        case 112: 
          { return Parser.WITH;
          }
        case 253: break;
        case 141: 
          { return Parser.TRANSIENT;
          }
        case 254: break;
        case 61: 
          { enumConstantMode = false; 
    		braceMode = CODEBLOCK; 
    		return Parser.SEMI;
          }
        case 255: break;
        case 28: 
          { codeBody.append('('); 
        parenDepth = nestingDepth++; 
        pushState(PARENBLOCK);
          }
        case 256: break;
        case 20: 
          { if (appendingToCodeBody) { codeBody.append('\''); } pushState(CHAR);
          }
        case 257: break;
        case 16: 
          { return Parser.QUERY;
          }
        case 258: break;
        case 54: 
          { return Parser.COLON;
          }
        case 259: break;
        case 51: 
          { return Parser.VERTLINE;
          }
        case 260: break;
        case 128: 
          { pushState(NAME);
                          return Parser.PACKAGE;
          }
        case 261: break;
        case 117: 
          { return Parser.CLASS;
          }
        case 262: break;
        case 140: 
          { classDepth++;
        braceMode = TYPE;
        pushState(NAME);
        return Parser.INTERFACE;
          }
        case 263: break;
        case 113: 
          { for( CommentHandler handler: commentHandlers ) {
        handler.onComment( text(), getLine(), getColumn() );
      }
          }
        case 264: break;
        case 39: 
          { return Parser.SLASH;
          }
        case 265: break;
        case 135: 
          { return Parser.VOLATILE;
          }
        case 266: break;
        case 115: 
          { return Parser.SUPER;
          }
        case 267: break;
        case 58: 
          { codeBody.append("\'"); popState(); appendingToCodeBody=false; return Parser.CHAR_LITERAL;
          }
        case 268: break;
        case 85: 
          { return Parser.PERCENTEQUALS;
          }
        case 269: break;
        case 65: 
          { popState();
          }
        case 270: break;
        case 8: 
          { nestingDepth++;
            if( parenMode >= 0 ) {
              annotationDepth = nestingDepth;
              pushState(parenMode);
              parenMode = -1;
            }
            return Parser.PARENOPEN;
          }
        case 271: break;
        case 29: 
          { if (nestingDepth == assignmentDepth) {
            appendingToCodeBody = true;
            popState(); 
            return Parser.COMMA; 
        } else {
            codeBody.append(',');
        }
          }
        case 272: break;
        case 14: 
          { return Parser.GREATERTHAN;
          }
        case 273: break;
        case 66: 
          { if (appendingToCodeBody) { codeBody.append("/*"); } pushState(MULTILINECOMMENT);
          }
        case 274: break;
        case 114: 
          { classDepth++;
        braceMode = TYPE;
        pushState(NAME);
        return Parser.CLASS;
          }
        case 275: break;
        case 105: 
          { classDepth++;
        braceMode = ENUM;
        pushState(NAME);
        return Parser.ENUM;
          }
        case 276: break;
        case 74: 
          { return Parser.SLASHEQUALS;
          }
        case 277: break;
        case 86: 
          { return Parser.PLUSEQUALS;
          }
        case 278: break;
        case 60: 
          { popState();
          yypushback(1);
          }
        case 279: break;
        case 35: 
          { codeBody.append('}');
        nestingDepth--;
    	if (nestingDepth==assignmentDepth) { 
            anonymousMode=false;
        }
          }
        case 280: break;
        case 116: 
          { return Parser.FINAL;
          }
        case 281: break;
        case 49: 
          { return Parser.PLUS;
          }
        case 282: break;
        case 30: 
          { codeBody.append('['); bracketMode = true; nestingDepth++;
          }
        case 283: break;
        case 95: 
          { return Parser.TO;
          }
        case 284: break;
        case 76: 
          { return Parser.MINUSMINUS;
          }
        case 285: break;
        case 143: 
          { return Parser.IMPLEMENTS;
          }
        case 286: break;
        case 110: 
          { return Parser.GREATERTHAN3EQUALS;
          }
        case 287: break;
        case 83: 
          { return Parser.AMPERSANDEQUALS;
          }
        case 288: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
