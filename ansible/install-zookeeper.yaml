# Be sure to install python on the host before running the playbook. 
# sudo yum install -y python2 python3
# sudo alternatives --set python /usr/bin/python2
# sudo pip2 install pyum
# sudo pip3 install pyum
---
- name: Install zookeeper as a service on the target. 
  hosts: "{{ target }}"
  gather_facts: no
  vars:
    APP_NAME: zookeeper
    APP_SRC: /usr/local/src/zookeeper
    APP_OPT: /opt/zookeeper
    APP_DATA: /opt/zookeeper/data
    APP_CONF: /opt/zookeeper/conf/zoo.cfg
    APP_SYSTEMD: "/usr/lib/systemd/system/{{APP_NAME}}.service"
    APP_SERVICE: "{{APP_NAME}}"
    APP_REPO: https://github.com/apache/zookeeper.git
    APP_VERSION: 3.5.6
    APP_TAG: release-3.5.6
    APP_CLIENT_PORT: 10281
    APP_ADMIN_PORT: 10280
  tasks:
    - name: Install {{APP_NAME}} dependencies. 
      package:
        name: [git,java-1.8.0-openjdk-devel]
      become: yes
    - name: Create the {{APP_NAME}} source directory {{APP_SRC}}. 
      file:
        name: "{{APP_SRC}}"
        state: directory
        owner: "{{USER_NAME}}"
        group: "{{USER_NAME}}"
      become: yes
    - name: Clone the {{APP_NAME}} source code. 
      git:
        repo: "{{APP_REPO}}"
        dest: "{{APP_SRC}}"
        version: "{{APP_TAG}}"
    - name: Build the {{APP_NAME}} application. 
      shell: ant package
      args:
        chdir: "{{APP_SRC}}"
        creates: "{{APP_SRC}}/build/{{APP_NAME}}-{{APP_VERSION}}-"
    - name: Create the {{APP_NAME}} install directory {{APP_OPT}}. 
      file:
        name: "{{APP_OPT}}"
        state: directory
        owner: "{{USER_NAME}}"
        group: "{{USER_NAME}}"
      become: yes
    - name: Install {{APP_NAME}} into the {{APP_OPT}} install directory. 
      shell: mv {{APP_SRC}}/build/{{APP_NAME}}-{{APP_VERSION}}-/* {{APP_OPT}}
      args:
        creates: "{{APP_OPT}}/bin"
    - name: Create the {{APP_NAME}} install directory {{APP_OPT}}. 
      file:
        name: "{{APP_OPT}}"
        state: directory
    - name: Create the {{APP_NAME}} config file {{APP_CONF}}. 
      copy:
        dest: "{{APP_CONF}}"
        content: |
          dataDir={{APP_DATA}}
          clientPort={{APP_CLIENT_PORT}}
          admin.serverPort={{APP_CLIENT_PORT}}
    - name: Create the {{APP_NAME}} systemd service {{APP_SYSTEMD}}. 
      copy:
        dest: "{{APP_SYSTEMD}}"
        content: |
          [Unit]
          Description=An open source centralized cluster manager. 
          After=network.target

          [Service]
          Type=simple
          User={{USER_NAME}}
          Group={{USER_NAME}}
          WorkingDirectory={{APP_OPT}}
          ExecStart={{APP_OPT}}/bin/zkServer.sh start-foreground
          Restart=on-failure

          [Install]
          WantedBy=multi-user.target
      become: yes
    - name: Reload the services. 
      systemd:
        daemon_reload: yes
      become: yes
    - name: Start and enable the {{APP_NAME}} service. 
      service:
        name: "{{APP_SERVICE}}"
        enabled: yes
        state: started
      become: yes
...

