#- name: Install {{COMPUTATE_MEDICALE_NAME}} dependencies
#  package:
#    name: [git,java-1.8.0-openjdk-devel]
#  become: yes
- name: Create the {{COMPUTATE_MEDICALE_NAME}} source directory {{COMPUTATE_MEDICALE_SRC}}
  file:
    name: "{{COMPUTATE_MEDICALE_SRC}}"
    state: directory
    owner: "{{USER_NAME}}"
    group: "{{USER_NAME}}"
  become: yes
- name: Clone the {{COMPUTATE_MEDICALE_NAME}} source code
  git:
    repo: "{{COMPUTATE_MEDICALE_REPO}}"
    dest: "{{COMPUTATE_MEDICALE_SRC}}"
- name: Create the {{COMPUTATE_MEDICALE_NAME}} systemd service {{COMPUTATE_MEDICALE_SYSTEMD}}. 
  template:
    src: computate_medicale_service.j2
    dest: "{{COMPUTATE_MEDICALE_SYSTEMD}}"
  become: yes
- name: Create the {{COMPUTATE_MEDICALE_NAME}} config dir. 
  file:
    name: "{{COMPUTATE_MEDICALE_SRC}}/config"
    state: directory
    owner: "{{USER_NAME}}"
    group: "{{USER_NAME}}"
- name: Create the {{COMPUTATE_MEDICALE_NAME}} default frFR config. 
  template:
    src: computate_medicale_config_frFR.config.j2
    dest: "{{COMPUTATE_MEDICALE_SRC}}/config/computate-medicale.config"
  become: yes
- name: Create the {{COMPUTATE_MEDICALE_NAME}} enUS config. 
  template:
    src: computate_medicale_config_enUS.config.j2
    dest: "{{COMPUTATE_MEDICALE_SRC}}/config/computate-medicale-enUS.config"
  become: yes
- name: Reload the services. 
  systemd:
    daemon_reload: yes
  become: yes
- name: Start and enable the {{COMPUTATE_MEDICALE_NAME}} service. 
  service:
    name: "{{COMPUTATE_MEDICALE_SERVICE}}"
    enabled: yes
    state: restarted
  become: yes
- name: Create frFR database user
  postgresql_user:
    name: "{{COMPUTATE_MEDICALE_DB_USER_FRFR}}"
    password: "{{COMPUTATE_MEDICALE_DB_PASSWORD_FRFR}}"
    login_unix_socket: /tmp
  become: true
  become_user: postgres
- name: Create frFR database
  postgresql_db:
    name: "{{COMPUTATE_MEDICALE_DB_NAME_FRFR}}"
    owner: "{{COMPUTATE_MEDICALE_DB_USER_FRFR}}"
    login_unix_socket: /tmp
  become: true
  become_user: postgres
- name: Create enUS database user
  postgresql_user:
    name: "{{COMPUTATE_MEDICALE_DB_USER_ENUS}}"
    password: "{{COMPUTATE_MEDICALE_DB_PASSWORD_ENUS}}"
    login_unix_socket: /tmp
  become: true
  become_user: postgres
- name: Create enUS database
  postgresql_db:
    name: "{{COMPUTATE_MEDICALE_DB_NAME_ENUS}}"
    owner: "{{COMPUTATE_MEDICALE_DB_USER_ENUS}}"
    login_unix_socket: /tmp
  become: true
  become_user: postgres
- name: Check for existing solr collection frFR
  shell: "{{SOLR_OPT}}/server/scripts/cloud-scripts/zkcli.sh -zkhost localhost:{{ZOOKEEPER_CLIENT_PORT}} -cmd ls /collections/{{COMPUTATE_MEDICALE_SOLR_COLLECTION_FRFR}}"
  ignore_errors: yes
  register: SOLR_COLLECTION_EXISTS_FRFR
  changed_when: false
- name: Create collection in solr frFR
  shell: "{{SOLR_OPT}}/bin/solr create_collection -n computate -c {{COMPUTATE_MEDICALE_SOLR_COLLECTION_FRFR}}"
  when: SOLR_COLLECTION_EXISTS_FRFR.rc != 0
- name: Check for existing solr collection enUS
  shell: "{{SOLR_OPT}}/server/scripts/cloud-scripts/zkcli.sh -zkhost localhost:{{ZOOKEEPER_CLIENT_PORT}} -cmd ls /collections/{{COMPUTATE_MEDICALE_SOLR_COLLECTION_ENUS}}"
  ignore_errors: yes
  register: SOLR_COLLECTION_EXISTS_ENUS
  changed_when: false
- name: Create collection in solr enUS
  shell: "{{SOLR_OPT}}/bin/solr create_collection -n computate -c {{COMPUTATE_MEDICALE_SOLR_COLLECTION_ENUS}}"
  when: SOLR_COLLECTION_EXISTS_ENUS.rc != 0
- name: Create the {{COMPUTATE_MEDICALE_NAME}} keystore p
roperties {{SSL_KEYSTORE_PATH}}/{{SSL_PROPERTIES_FILENAME}}
  template:
  src: computate_medicale_keystore.properties.j2
  dest: "{{SSL_KEYSTORE_PATH}}/{{SSL_PROPERTIES_FILENAME}}"
- name: Create the {{COMPUTATE_MEDICALE_NAME}} keystore jks {{SSL_JKS_PATH}}
  template:
  src: computate_medicale_keystore.jks.j2
  dest: "{{SSL_JKS_PATH}}"

